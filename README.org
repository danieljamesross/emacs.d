* org-init
  :PROPERTIES:
  :header-args: :results silent :tangle yes
  :END:
  This is my initialisation file for Emacs. Behold!, the code blocks will be
  compiled at startup, but not these titles or this text. 
** Packages
   #+BEGIN_SRC emacs-lisp
     ;; (add-to-list 'package-archives
     ;; 	     '("melpa" . "http://melpa.milkbox.net/packages/") t)

     ;; (defun ensure-package-installed (&rest packages)
     ;;   "Assure every package is installed, ask for installation if itâ€™s not.

     ;;    Return a list of installed packages or nil for every skipped package."
     ;;   (mapcar
     ;;    (lambda (package)
     ;;      ;; (package-installed-p 'evil)
     ;;      (if (package-installed-p package)
     ;; 	 nil
     ;;        (if (y-or-n-p (format "Package %s is missing. Install it? " package))
     ;; 	   (package-install package)
     ;; 	 package)))
     ;;    packages))

     ;; ;; make sure to have downloaded archive description.
     ;; ;; Or use package-archive-contents as suggested by Nicolas Dudebout
     ;; (or (file-exists-p package-user-dir)
     ;;     (package-refresh-contents))

     ;; (ensure-package-installed 'buffer-move 'zoom 'default-text-scale 'fast-scroll
     ;; 			  'dimmer 'telephone-line 'unicode-fonts 'fira-code-mode
     ;; 			  'auto-complete 'flycheck 'slime 'lisp-extra-font-lock
     ;; 			  'rainbow-delimiters 'latex-pretty-symbols 'js-comint
     ;; 			  'lsp-mode 'emmet-mode 'prettier-js 'ox-reveal
     ;; 			  'org-bullets 'ac-slime 'slime-repl-ansi-color 'auctex
     ;; 			  'latex-preview-pane 'eshell-syntax-highlighting
     ;; 			  'add-node-modules-path 'company)    

     ;; ;; activate installed packages
     ;; (package-initialize)
   #+END_SRC
** PATH
   #+BEGIN_SRC emacs-lisp
     (setq default-directory (expand-file-name "~/"))
     (setenv "PATH" (concat "/Library/TeX/texbin:"
			    (getenv "PATH")))
     (add-to-list 'exec-path "/Library/TeX/texbin")
     (setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
     (setq exec-path (append exec-path '("/usr/local/bin")))
     (package-install 'exec-path-from-shell)
     (exec-path-from-shell-initialize)
   #+END_SRC
** Node
   #+begin_src emacs-lisp
     (eval-after-load 'js-mode
       '(add-hook 'js-mode-hook #'add-node-modules-path))
     (eval-after-load 'js2-mode
       '(add-hook 'js2-mode-hook #'add-node-modules-path))
     (eval-after-load 'web-mode
       '(add-hook 'web-mode-hook #'add-node-modules-path))
   #+end_src
** Shortcuts
*** Aliases
    #+BEGIN_SRC emacs-lisp
    (defalias 'pi 'package-install)
    (defalias 'pl 'package-list-packages)
    (defalias 'pr 'package-refresh-contents)
    (defalias 'wm 'web-mode)
    (defalias 'j2 'js2-mode)
    (defalias 'mt 'multi-term)
    (defalias 'rb 'revert-buffer)
    (defalias 'scd 'sc-deftest-template)
    (defalias 'tf 'transpose-frame)
    (defalias 'rbp 'react-boilerplate)
    #+END_SRC
*** Key bindings
    #+BEGIN_SRC emacs-lisp
      (global-set-key "\M-3" '(lambda() (interactive) (insert "#")))
      (global-set-key (kbd "C-c n") #'djr-new-buffer-frame)
      (global-set-key "\C-c\l" 'goto-line)
      (global-set-key "\C-x\l" '(lambda () (interactive)
				  (switch-to-buffer "*slime-repl sbcl*")))
      (global-set-key (kbd "C-x C-b") 'ibuffer) ;; Use Ibuffer for Buffer List
      (global-set-key "\C-c\ib" 'ibuffer)
      ;; Becasue I just can't quite those MacOS bindings, and why should I?
      (global-set-key (kbd "s-<right>") 'move-end-of-line)
      (global-set-key (kbd "s-<left>") 'move-beginning-of-line)
      (global-set-key (kbd "s-<up>") 'beginning-of-buffer)
      (global-set-key (kbd "s-<down>") 'end-of-buffer)
      (global-set-key (kbd "M-<up>") 'scroll-down-command)
      (global-set-key (kbd "M-<down>") 'scroll-up-command)
      (global-set-key (kbd "s-w") 'delete-frame)
      (global-set-key (kbd "s-<backspace>") 'kill-whole-line)
      ;; Resize Windows
      (global-set-key (kbd "S-s-C-<down>") 'shrink-window-horizontally)
      (global-set-key (kbd "S-s-C-<up>") 'enlarge-window-horizontally)
      ;; (global-set-key (kbd "s-C-<down>") 'shrink-window)
      ;; (global-set-key (kbd "s-C-<up>") 'enlarge-window)
    #+END_SRC
** Buffers and Panes
*** buffer-move
    #+BEGIN_SRC emacs-lisp
      ;; (require 'buffer-move)
      (use-package buffer-move
	:ensure t
	:bind (("s-C-<up>" . buf-move-up)
	       ("s-C-<down>" . buf-move-down)
	       ("s-C-<left>" . buf-move-left)
	       ("s-C-<right>" . buf-move-right)))
	;; (global-set-key (kbd "<s-C-down>")   'buf-move-down)
	;; (global-set-key (kbd "<s-C-left>")   'buf-move-left)
	;; (global-set-key (kbd "<s-C-right>")  'buf-move-right)
    #+END_SRC
*** Panes
    #+BEGIN_SRC emacs-lisp
  (setq default-frame-alist
      (add-to-list 'default-frame-alist '(width . 100)))
  (setq default-frame-alist
      (add-to-list 'default-frame-alist '(height . 200)))

  ;;; Use the commands "control+x" followed by an arrow to
  ;;; navigate between panes
  (global-set-key (kbd "C-x <up>") 'windmove-up)
  (global-set-key (kbd "C-x <down>") 'windmove-down)
  (global-set-key (kbd "C-x <left>") 'windmove-left)
  (global-set-key (kbd "C-x <right>") 'windmove-right)
    #+END_SRC
*** zoom mode
    #+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(zoom-mode t))
    #+END_SRC
** Cosmetic
*** Text inc/dec
    #+BEGIN_SRC emacs-lisp
   ;; font scaling
   (use-package default-text-scale
     :ensure t
     :config
     (global-set-key (kbd "s-=") 'default-text-scale-increase)
     (global-set-key (kbd "s--") 'default-text-scale-decrease))
    #+END_SRC
*** Custom file
    #+BEGIN_SRC emacs-lisp
  (defadvice en/disable-command (around put-in-custom-file activate)
	"Put declarations in `custom-file'."
	(let ((user-init-file custom-file))
          ad-do-it))

  (setq custom-file (expand-file-name "~/.emacs.d/djr-custom.el"))
  (load custom-file)
    #+END_SRC
*** Customize
    #+BEGIN_SRC emacs-lisp
  (set-variable 'meta-flag 't)
  (define-key esc-map "?" 'describe-key-briefly)
  (require 'saveplace)
  (setq-default save-place t)
  (setq make-backup-files nil)
  (setq debug-on-error t)
  (setq case-fold-search t)
  (fset 'yes-or-no-p 'y-or-n-p)
  (delete-selection-mode 1)
  (setq ead-buffer-completion-ignore-case t)
    #+END_SRC
*** autofill
    #+BEGIN_SRC emacs-lisp
      (setq-default fill-column 80)
      (add-hook 'web-mode-hook
		(lambda () (set (make-local-variable 'comment-auto-fill-only-comments) t)))
      (add-hook 'js2-mode-hook
		(lambda () (set (make-local-variable 'comment-auto-fill-only-comments) t)))
      (toggle-text-mode-auto-fill)
      (add-hook 'lisp-mode-hook 'turn-on-auto-fill)
      (add-hook 'emacs-lisp-mode-hook 'turn-on-auto-fill)
      (remove-hook 'nxml-mode-hook #'turn-on-auto-fill)

    #+End_SRC
*** new UNTITLED file
    #+BEGIN_SRC emacs-lisp
  ;; keybinding for this is in the key bindings menu
  ;; `C-c n'
  (defun djr-new-buffer-frame ()
    "Create a new frame with a new empty buffer."
    (interactive)
    (let ((buffer (generate-new-buffer "untitled")))
      (set-buffer-major-mode buffer)
      (display-buffer buffer '(display-buffer-pop-up-frame . nil))))
    #+END_SRC
*** fast-scroll
    #+BEGIN_SRC emacs-lisp
      (use-package fast-scroll
	:ensure t)
    #+END_SRC
*** dimmer-mode
    #+BEGIN_SRC emacs-lisp
      (use-package dimmer
	:defer 1
	:config
	(setq dimmer-exclusion-predicates
	      '(helm--alive-p window-minibuffer-p echo-area-p))
	(setq dimmer-exclusion-regexp-list
	      '("^\\*[h|H]elm.*\\*" "^\\*Minibuf-[0-9]+\\*"
		"^.\\*which-key\\*$" "^*Messages*" "*LV*"
		"^*[e|E]cho [a|A]rea 0*" "*scratch*"
		"transient"))
	(dimmer-mode t))
    #+END_SRC
*** telephone-line
    #+BEGIN_SRC emacs-lisp
      (use-package telephone-line
	:ensure t
	:config (setq telephone-line-lhs
		      '((accent . (telephone-line-vc-segment
				   telephone-line-erc-modified-channels-segment
				   telephone-line-process-segment))
			(nil    . (telephone-line-minor-mode-segment
				   telephone-line-buffer-segment)))
		      telephone-line-rhs
		      '((nil    . (telephone-line-misc-info-segment))
			(accent . (telephone-line-major-mode-segment)))))

      ;; (require 'telephone-line)
      ;; (setq telephone-line-lhs
      ;; 	    '(;; (evil   . (telephone-line-evil-tag-segment))
      ;; 	      (accent . (telephone-line-vc-segment
      ;; 			 telephone-line-erc-modified-channels-segment
      ;; 			 telephone-line-process-segment))
      ;; 	      (nil    . (telephone-line-minor-mode-segment
      ;; 			 telephone-line-buffer-segment))))
      ;; (setq telephone-line-rhs
      ;; 	    '((nil    . (telephone-line-misc-info-segment))
      ;; 	      (accent . (telephone-line-major-mode-segment))
      ;; 	      ;; (evil   . (telephone-line-airline-position-segment))
      ;; 	      ))
      (telephone-line-mode t)
    #+END_SRC
*** transpose-frame
    #+begin_src emacs-lisp
      (use-package transpose-frame
	:ensure t
	:bind ("C-x tf" . transpose-frame))
    #+end_src
** Font & Encoding & Ligatures
*** UTF-8
    #+BEGIN_SRC emacs-lisp
  ;;; utf-8
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
    #+END_SRC
*** Unicode
    #+begin_src emacs-lisp
      (use-package unicode-fonts
	:ensure t
	:config
	(unicode-fonts-setup))
    #+end_src
*** fira-code-mode
    Taken from [[https://github.com/Profpatsch/blog/blob/master/posts/ligature-emulation-in-emacs/post.md#appendix-b-update-1-firacode-integration][here]]
    #+begin_src emacs-lisp
      (use-package fira-code-mode
	:custom (fira-code-mode-disabled-ligatures '("[]" "x"))  ; ligatures you don't want
	:hook prog-mode)  
    #+end_src
*** Fonts
    <<fonts>> 
    #+BEGIN_SRC emacs-lisp
    ;; used to be my default, but now do ligatures
    ;; (add-to-list 'default-frame-alist '(font . "Monaco"))
    ;; I find Fira is prettier than Cascadia but leaving it in just in case
    ;; (add-to-list 'default-frame-alist '(font . "Cascadia Code SemiLight"))
    (add-to-list 'default-frame-alist '(font . "Fira Code"))
    (set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code Symbol")
    ;; (add-to-list 'default-frame-alist '(font . "Fira Code Symbol"))
    ;; (set-fontset-font t nil "Fira Code Symbol" nil 'append)
    (set-face-attribute 'default nil :height 120)
    #+END_SRC
*** Ligatures
    #+begin_src emacs-lisp
      (use-package ligature
	:load-path "~/.emacs.d/ligature/"
	:config
	;; Enable the "www" ligature in every possible major mode
	(ligature-set-ligatures 't '("www"))
	;; Enable traditional ligature support in eww-mode, if the
	;; `variable-pitch' face supports it
	(ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
	;; Enable all Cascadia Code ligatures in programming modes
	(ligature-set-ligatures
	 'prog-mode
	 '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
	   ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
	   "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
	   "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
	   "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
	   "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
	   "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
	   "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
	   ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
	   "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
	   "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
	   "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
	   "\\" "://"))
	;; Enables ligature checks globally in all buffers. You can also do it
	;; per mode with `ligature-mode'.
	(global-ligature-mode t))
    #+end_src
** File Types & modes
   #+BEGIN_SRC emacs-lisp
   (setq auto-mode-alist
	 (append '(("\\.c$"       . c-mode)
		   ("\\.cs$"      . csharp-mode)
		   ("\\.txt$"     . text-mode)
		   ("\\.md$"      . markdown-mode)
		   ("\\.cpp$"     . c++-mode)
		   ("\\.CPP$"     . c++-mode)
		   ("\\.h$"       . c-mode)
		   ("\\.lsp$"     . lisp-mode)
		   ("\\.cl$"      . lisp-mode)
		   ("\\.cm$"      . lisp-mode)
		   ("\\.lisp$"    . lisp-mode)
		   ("\\.clm$"     . lisp-mode)
		   ("\\.ins$"     . lisp-mode)
		   ("\\.el$"      . lisp-mode)
		   ("\\.el.gz$"   . lisp-mode)
		   ("\\.ws$"      . lisp-mode)
		   ("\\.asd$"     . lisp-mode)
		   ("\\.py$"      . python-mode)
		   ("\\.ly$"      . lilypond-mode)
		   ("\\.js$"      . js2-mode)
		   ("\\.json$"    . json-mode)
		   ("\\.jsx$"     . web-mode)
		   ("\\.html$"    . web-mode)
		   ("\\.ejs$"     . web-mode)
		   ("\\.htm$"     . web-mode)
		   ("\\.shtml$"   . web-mode)
		   ("\\.tsx$"     . web-mode)
		   ("\\.ts$"      . web-mode)
		   ("\\.tex$"     . latex-mode)
		   ("\\.cls$"     . latex-mode)
		   ("\\.java$"    . java-mode)
		   ("\\.ascii$"   . text-mode)
		   ("\\.sql$"     . sql-mode)
		   ("\\.pl$"      . perl-mode)
		   ("\\.php$"     . php-mode)
		   ("\\.jxs$"     . shader-mode)
		   ("\\.sh$"      . shell-mode)
		   ("\\.gnuplot$" . shell-mode))
		 auto-mode-alist))
   #+END_SRC
** Colours
   #+BEGIN_SRC emacs-lisp
     (require 'cl-lib)
     (require 'color)
   #+END_SRC
** Generate Code
*** Add sc-deftest
    #+BEGIN_SRC emacs-lisp
   (defun sc-deftest-template (test)
     (interactive "sdef-test name: ")
     (insert "(sc-deftest test-")
     (insert test)
     (insert " ()")
     (newline)
     (insert "  (let* (())")
     (newline)
     (insert "    (sc-test-check ")
     (newline)
     (insert "    )))"))
    #+END_SRC
*** js-80-slash
    #+BEGIN_SRC emacs-lisp
   (defun js-80-slash ()
     (interactive)
     (loop repeat 80 do (insert "/")))
    #+END_SRC
*** lisp-80-slash
    #+BEGIN_SRC emacs-lisp
   (defun lisp-80-slash ()
     (interactive)
     (loop repeat 80 do (insert ";")))
    #+END_SRC
*** React boilerplate
    #+BEGIN_SRC emacs-lisp
   (defun react-boilerplate (name)
     (interactive "sFunction Name: ")
     (js2-mode)
     (insert "import React from 'react';")
     (newline)
     (newline)
     (insert "function ")
     (insert name) 
     (insert "() {")
     (newline)
     (newline)
     (insert "    return ();")
     (newline)
     (insert "};")
     (newline)
     (newline)
     (insert "export default ")
     (insert name)
     (insert ";"))
    #+END_SRC
*** Web boilerplate
    #+BEGIN_SRC emacs-lisp
   (defun web-boilerplate (page-title)
     (interactive "sHTML Title: ")
     (web-mode)
     (insert "<!DOCTYPE html>")
     (newline)
     (insert "<html>")
     (newline)
     (insert "    <head>")
     (newline)
     (insert "	<title>")
     (insert page-title)
     (insert "</title>")
     (newline)
     (insert "    </head>")
     (newline)
     (insert "    <body>")
     (newline)
     (newline)
     (insert "       <h1>This is a Heading</h1>")
     (newline)
     (insert "        <p>This is a paragraph.</p>")
     (newline)
     (newline)
     (insert "    </body>")
     (newline)
     (insert "</html>"))
    #+END_SRC
*** ROBODOC
    #+BEGIN_SRC emacs-lisp
    (defun elisp-depend-filename (fullpath)
      "Return filename without extension and path.
       FULLPATH is the full path of file."
      (file-name-sans-extension (file-name-nondirectory fullpath)))
    (defun robodoc-fun ()
      ;; "Put robodoc code around a funciton definition"
      ;; (interactive "r")
      (interactive)
      (save-excursion
	(backward-sexp)
	(let* ((beg (point))
	       (end (progn (forward-sexp) (point)))
	       (name (buffer-substring beg end))
	       (buffer (elisp-depend-filename (buffer-file-name))) 
	       ;; (buffer-name))
	       ;; is this defun or defmethod
	       (letter (progn
			 (backward-sexp 2)
			 (let* ((beg (point))
				(end (progn (forward-sexp) (point)))
				(fun (buffer-substring beg end)))
			   ;; (insert (preceding-sexp))
			   (if (string= fun "defun")
			       "f"
			     "m")))))
	  (beginning-of-line)
	  (newline)
	  (previous-line)
	  (newline)
	  (insert
	   ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;")
	  (newline)
	  (insert ";;; ****" letter "* " buffer "/" name)
	  ;; (insert ";;; ****" letter "*" buffer "/" name)
	  (newline)
	  ;; (insert ";;; FUNCTION")
	  ;; (newline)
	  (insert ";;; AUTHOR")
	  (newline)
	  (insert ";;; Daniel Ross (mr.danielross[at]gmail[dot]com) ")
	  (newline)
	  (insert ";;; ")
	  (newline)
	  (robodoc-fun-aux "DATE")
	  (robodoc-fun-aux "DESCRIPTION")
	  ;; (insert ";;; " name ":")
	  ;; (newline)
	  ;; (insert ";;;")
	  ;; (newline)
	  ;; (insert ";;;")
	  ;; (newline)
	  (robodoc-fun-aux "ARGUMENTS")
	  (robodoc-fun-aux "OPTIONAL ARGUMENTS")
	  (robodoc-fun-aux "RETURN VALUE")
	  (insert ";;; EXAMPLE")
	  (newline)
	  (insert "#|")
	  (newline)
	  (newline)
	  (insert "|#")
	  (newline)
	  (insert ";;; SYNOPSIS")
	  (next-line)
	  (forward-sexp 2)
	  (newline)
	  (insert ";;; ****"))))

    (defun robodoc-fun-aux (tag)
      (insert ";;; " tag)
      (newline)
      (insert ";;; ")
      (newline)
      (insert ";;; ")
      (newline))
    #+END_SRC
** Non Elpa/Melpa Package Modes
*** Antescofo mode
    #+BEGIN_SRC emacs-lisp
      (when (file-directory-p
	     (expand-file-name "~/site-lisp/antesc-mode-master/"))
	;; Antescofo text highlighting
	;; Thanks to Pierre Donat-Bouillud
	;; https://github.com/programLyrique/antesc-mode
	(add-to-list 'load-path (expand-file-name "~/site-lisp/antesc-mode-master"))
	(autoload 'antesc-mode "antesc-mode" "Major mode for editing Antescofo code" t)

	;; Extensions for antescofo mode
	(setq auto-mode-alist
	      (append '(("\\.\\(score\\|asco\\)\\.txt$" . antesc-mode))
		      auto-mode-alist)))
    #+END_SRC
*** Lilypond mode
    #+BEGIN_SRC emacs-lisp
      (when (file-exists-p
	     (expand-file-name "~/site-lisp/lilypond-init.el"))
	;; Antescofo text highlighting
	;; Thanks to Pierre Donat-Bouillud
	;; https://github.com/programLyrique/antesc-mode
	;; lilypond mode
	(add-to-list 'load-path (expand-file-name "~/site-lisp"))
	(load (expand-file-name "~/site-lisp/lilypond-init.el")))
    #+END_SRC
** Auto Complete, Company, Flyspell & FlyCheck
*** Company
    #+begin_src emacs-lisp
      (use-package company
	:ensure t
	:init (add-hook 'after-init-hook 'global-company-mode)
	:bind (("C-." .  'company-complete-common))
	:custom (company-idle-delay 0.4))
    #+end_src
*** Flyspell
Taken from [[https://stackoverflow.com/questions/17126951/emacs-cannot-find-flyspell-ispell][here]].
You need to install the ASpell spell checker. You can install it with homebrew
with `brew install aspell`.
    #+BEGIN_SRC emacs-lisp
      ;; flyspell
      ;; (setq flyspell-mode t)
      ;; (add-hook 'fundamental-mode-hook '(flyspell-mode nil))
      ;; (add-hook 'nxml-mode-hook '(flyspell-mode nil))
      (dolist (hook '(text-mode-hook markdown-mode-hook))
	  (add-hook hook (lambda () (flyspell-mode 1))))
      (dolist (hook '(lisp-mode-hook web-mode-hook js2-mode-hook))
	(add-hook hook (lambda () (flyspell-prog-mode))))
      (setq flyspell-issue-message-flag nil)
      (defun flyspell-emacs-popup-textual (event poss word)
	"A textual flyspell popup menu."
	(require 'popup)
	(let* ((corrects (if flyspell-sort-corrections
			     (sort (car (cdr (cdr poss))) 'string<)
			   (car (cdr (cdr poss)))))
	       (cor-menu (if (consp corrects)
			     (mapcar (lambda (correct)
				       (list correct correct))
				     corrects)
			   '()))
	       (affix (car (cdr (cdr (cdr poss)))))
	       show-affix-info
	       (base-menu  (let ((save (if (and (consp affix) show-affix-info)
					   (list
					    (list (concat "Save affix: " (car affix))
						  'save)
					    '("Accept (session)" session)
					    '("Accept (buffer)" buffer))
					 '(("Save word" save)
					   ("Accept (session)" session)
					   ("Accept (buffer)" buffer)))))
			     (if (consp cor-menu)
				 (append cor-menu (cons "" save))
			       save)))
	       (menu (mapcar
		      (lambda (arg) (if (consp arg) (car arg) arg))
		      base-menu)))
	  (cadr (assoc (popup-menu* menu :scroll-bar t) base-menu))))
      (eval-after-load "flyspell"
	'(progn
	   (fset 'flyspell-emacs-popup 'flyspell-emacs-popup-textual)))
    #+END_SRC
*** Flycheck
    #+BEGIN_SRC emacs-lisp
      ;; (use-package flycheck-typescript-tslint-setup
      ;;   :ensure t)
      (use-package flycheck
	:ensure t
	;; :config (;(append flycheck-disabled-checkers
	;; 	  ;		       '(javascript-jshint json-jsonlist))
	;; 	   (flycheck-global-modes '((not org-mode)(not nxml-mode)))
	;; 	   ;; Enable eslint checker for web-mode
	;; 	   ;; (flycheck-add-mode 'javascript-eslint 'web-mode)
	;; 	   ;; (flycheck-add-mode 'javascript-eslint 'js2-mode)
	;; 	   ;; https://github.com/purcell/exec-path-from-shell
	;; 	   ;; only need exec-path-from-shell on OSX
	;; 	   ;; this hopefully sets up path and other vars better
	;; 	   (when (memq window-system '(mac ns))
	;; 	     (exec-path-from-shell-initialize)))
	;; :hook ((js2-mode web-mode) . javascript-eslint)
	:init (global-flycheck-mode))



      ;; (require 'flycheck)
      ;; (setq-default flycheck-disabled-checkers
      ;; 	      (append flycheck-disabled-checkers
      ;; 		      '(javascript-jshint json-jsonlist)))
      ;; (setq flycheck-global-modes '((not org-mode)(not nxml-mode)))
      ;; (add-hook 'after-init-hook #'global-flycheck-mode)
      ;; ;; Enable eslint checker for web-mode
      ;; (flycheck-add-mode 'javascript-eslint 'web-mode)
      ;; (flycheck-add-mode 'javascript-eslint 'js2-mode)
      ;; ;; https://github.com/purcell/exec-path-from-shell
      ;; ;; only need exec-path-from-shell on OSX
      ;; ;; this hopefully sets up path and other vars better
      ;; (when (memq window-system '(mac ns))
      ;;   (exec-path-from-shell-initialize))
    #+END_SRC
** Web Dev Stuff
*** js-comint / js2
    #+BEGIN_SRC emacs-lisp
      (require 'js-comint)
      (setq inferior-js-program-command "/usr/bin/java org.mozilla.javascript.tools.shell.Main")
      (add-hook 'js2-mode-hook 
		'(lambda ()
		   (local-set-key "\C-x\C-e" 'js-send-last-sexp)
		   (local-set-key "\C-\M-x" 'js-send-last-sexp-and-go)
		   (local-set-key "\C-cb" 'js-send-buffer)
		   (local-set-key "\C-c\C-b" 'js-send-buffer-and-go)
		   (local-set-key "\C-cl" 'js-load-file-and-go)))
      (add-hook 'js2-mode-hook 'ac-js2-mode)
    #+END_SRC
*** lsp-mode
    Got this from [[https://emacs-lsp.github.io/lsp-mode/page/installation/][LSP support for Emacs]] site
    #+BEGIN_SRC  emacs-lisp
      ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
      (setq lsp-keymap-prefix "C-c l")
      (use-package lsp-mode
	:hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
	       (js2-mode . lsp)
	       (web-mode . lsp))
	:commands lsp)

      ;; optionally
      (use-package lsp-ui :commands lsp-ui-mode :ensure t)

    #+END_SRC
*** typescript
    #+begin_src emacs-lisp
      (defun setup-tide-mode ()
	(interactive)
	(tide-setup)
	(flycheck-mode +1)
	(setq flycheck-check-syntax-automatically '(save mode-enabled))
	(eldoc-mode +1)
	(tide-hl-identifier-mode +1)
	;; company is an optional dependency. You have to
	;; install it separately via package-install
	;; `M-x package-install [ret] company`
	(company-mode +1))

      ;; aligns annotation to the right hand side
      (setq company-tooltip-align-annotations t)

      ;; formats the buffer before saving
      (add-hook 'before-save-hook 'tide-format-before-save)

      (add-hook 'typescript-mode-hook #'setup-tide-mode)
      (setq tide-format-options
	    '(:insertSpaceAfterFunctionKeywordForAnonymousFunctions
	      t
	      :placeOpenBraceOnNewLineForFunctions 
	      nil
	      :indentSize 2
	      :tabSize 2
	      :insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces
	      t)) 
    #+end_src
*** tsx
    #+begin_src emacs-lisp
      (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
      (add-hook 'web-mode-hook
		(lambda ()
		  (when (string-equal "tsx" (file-name-extension buffer-file-name))
		    (setup-tide-mode))))
      ;; enable typescript-tslint checker
      (flycheck-add-mode 'typescript-tslint 'web-mode)
    #+end_src
*** jsx
    #+begin_src emacs-lisp
      (add-to-list 'auto-mode-alist '("\\.jsx\\'" . web-mode))
      (add-hook 'web-mode-hook
		(lambda ()
		  (when (string-equal "jsx" (file-name-extension buffer-file-name))
		    (setup-tide-mode))))
      ;; configure jsx-tide checker to run after your default jsx checker
      (flycheck-add-mode 'javascript-eslint 'web-mode)
      ;; dunno
      ;; (flycheck-add-next-checker 'javascript-eslint 'jsx-tide 'append)
    #+end_src
*** emmet & web-mode
    #+BEGIN_SRC emacs-lisp
      (use-package emmet-mode
	:ensure t
	;; :config ((setq web-mode-ac-sources-alist
	;; 		 '(("css" . (ac-source-css-property))
	;; 		   ("html" . (ac-source-words-in-buffer ac-source-abbrev)))
	;; 		 web-mode-content-types-alist
	;; 		 '(("jsx" . "\\.js[x]?\\'"))
	;; 		 emmet-expand-jsx-className? t
	;; 		 web-mode-ac-sources-alist
	;; 		 '(("php" . (ac-source-yasnippet ac-source-php-auto-yasnippets))
	;; 		   ("html" . (ac-source-emmet-html-aliases ac-source-emmet-html-snippets))
	;; 		   ("css" . (ac-source-css-property ac-source-emmet-css-snippets)))))
	:hook ((web-mode . (lambda () (emmet-mode)))
	       (css-mode . (lambda () (emmet-mode)))
	       ;; (web-mode-before-auto-complete-hooks
	       ;;  . (lambda ()
	       ;;      (let ((web-mode-cur-language
	       ;; 	     (web-mode-language-at-pos)))
	       ;; 	(if (string= web-mode-cur-language "php")
	       ;; 	    (yas-activate-extra-mode 'php-mode)
	       ;; 	  (yas-deactivate-extra-mode 'php-mode))
	       ;; 	(if (string= web-mode-cur-language "css")
	       ;; 	    (setq emmet-use-css-transform t)
	       ;; 	  (setq emmet-use-css-transform nil)))))
	       local-write-file-hooks . (lambda () (delete-trailing-whitespace) nil)))

      (use-package web-mode
	:ensure t
	:mode (("\\.html\\'"	. web-mode))
	:hook ((setup-tide-mode))
	:config (setq web-mode-enable-auto-quoting nil))

      ;; (require 'emmet-mode)			
      ;; (setq web-mode-ac-sources-alist
      ;;       '(("css" . (ac-source-css-property))
      ;; 	("html" . (ac-source-words-in-buffer ac-source-abbrev))))
      ;; (setq web-mode-content-types-alist
      ;;       '(("jsx" . "\\.js[x]?\\'")))
      ;; (add-hook 'web-mode-hook  'emmet-mode)
      ;; (setq web-mode-ac-sources-alist
      ;;       '(("php" . (ac-source-yasnippet ac-source-php-auto-yasnippets))
      ;; 	("html" . (ac-source-emmet-html-aliases ac-source-emmet-html-snippets))
      ;; 	("css" . (ac-source-css-property ac-source-emmet-css-snippets))))

      ;; (add-hook 'web-mode-before-auto-complete-hooks
      ;; 	  '(lambda ()
      ;; 	     (let ((web-mode-cur-language
      ;; 		    (web-mode-language-at-pos)))
      ;; 	       (if (string= web-mode-cur-language "php")
      ;; 		   (yas-activate-extra-mode 'php-mode)
      ;; 		 (yas-deactivate-extra-mode 'php-mode))
      ;; 	       (if (string= web-mode-cur-language "css")
      ;; 		   (setq emmet-use-css-transform t)
      ;; 		 (setq emmet-use-css-transform nil)))))
      ;; (setq emmet-expand-jsx-className? t)

      ;; (add-hook 'local-write-file-hooks
      ;; 	  (lambda ()
      ;; 	    (delete-trailing-whitespace)
      ;; 	    nil))
    #+END_SRC
*** web-mode-indent
    #+BEGIN_SRC emacs-lisp
   (defun my-setup-indent (n)
     ;; java/c/c++
     (setq-local c-basic-offset n)
     ;; web development
     ;; (setq-local coffee-tab-width n) ; coffeescript
     ;; (setq-local javascript-indent-level n) ; javascript-mode
     ;; (setq-local js-indent-level n) ; js-mode
     ;; (setq-local js2-basic-offset n) ; js2-mode, in latest js2-mode, it's alias of js-indent-level
     (setq-local web-mode-markup-indent-offset n) ; web-mode, html tag in html file
     (setq-local web-mode-css-indent-offset n) ; web-mode, css in html file
     (setq-local web-mode-code-indent-offset n) ; web-mode, js code in html file
     (setq-local css-indent-offset n)) ; css-mode

   (defun my-web-code-style ()
     (interactive)
     ;; use tab instead of space
     (setq-local indent-tabs-mode t)
     ;; indent 4 spaces width
     (my-setup-indent 2))

   (add-hook 'web-mode-hook 'my-web-code-style)

    #+END_SRC
    
*** js-prettier-mode
    #+BEGIN_SRC emacs-lisp
      (require 'prettier-js)
      (add-hook 'js2-mode-hook 'prettier-js-mode)
      ;; (add-hook 'web-mode-hook 'prettier-js-mode)
      (add-hook 'js-mode-hook 'prettier-js-mode)
      (defun enable-minor-mode (my-pair)
	"Enable minor mode if filename match the regexp.  MY-PAIR is a cons cell (regexp . minor-mode)."
	(if (buffer-file-name)
	    (if (string-match (car my-pair) buffer-file-name)
		(funcall (cdr my-pair)))))
      (add-hook 'web-mode-hook #'(lambda ()
				   (enable-minor-mode
				    '("\\.jsx?\\'" . prettier-js-mode))
				   (enable-minor-mode
				    '("\\.js?\\'" . prettier-js-mode))
				   (enable-minor-mode
				    '("\\.ts?\\'" . prettier-js-mode))
				   (enable-minor-mode
				    '("\\.tsx?\\'" . prettier-js-mode))))
      (setq prettier-js-args 
	    '("--trailing-comma" "none"
	      "--bracket-spacing" "true"
	      "--single-quote" "true"
	      "--jsx-single-quote" "true"
	      "--jsx-bracket-same-line" "true"
	      "--print-width" "80"
	      "--use-tabs" "false"
	      "--tab-width" "2"))

    #+END_SRC
*** tide
    #+begin_src emacs-lisp
	    (use-package tide
	      :ensure t
	      :after (typescript-mode company flycheck)
	      :hook ((typescript-mode . tide-setup)
		     (typescript-mode . tide-hl-identifier-mode)
		     ;; (before-save . tide-format-before-save)
      ))
    #+end_src
** Lisp stuff
*** slime & SBCL
    #+BEGIN_SRC emacs-lisp
    ;; Set your lisp system and, optionally, some contribs
    (setq inferior-lisp-program "/opt/sbcl/bin/sbcl")
    (let ((sbcl-local (car (file-expand-wildcards
			    "/usr/local/Cellar/sbcl/*/lib/sbcl/sbcl.core"))))
      (setq slime-lisp-implementations
	    `((sbcl ("/usr/local/bin/sbcl"
		     "--core"
		     ;; replace with correct path of sbcl
		     ,sbcl-local
		     "--dynamic-space-size" "2147")))))

    ;; slime
    (require 'slime)
    (require 'slime-autoloads)
    ;; Also setup the slime-fancy contrib
;    (add-to-list 'slime-contribs 'slime-fancy)
    (add-hook 'slime-repl-mode-hook 'slime-repl-ansi-color-mode)
    (slime-setup)
    (with-eval-after-load 'slime-repl
      (require 'slime-repl-ansi-color))
    #+END_SRC
*** paredit
    Man, this is slow. Removing it for now.
    #+BEGIN_SRC emacs-lisp
  ;; (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
  ;; (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
  ;; (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
  ;; (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
  ;; (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
  ;; (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
  ;; (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
  ;; (add-hook 'slime-repl-mode-hook (lambda () (paredit-mode +1)))
  ;; ;; Stop SLIME's REPL from grabbing DEL,
  ;; ;; which is annoying when backspacing over a '('
  ;; (defun override-slime-repl-bindings-with-paredit ()
  ;;   (define-key slime-repl-mode-map
  ;;     (read-kbd-macro paredit-backward-delete-key) nil))
  ;; (add-hook 'slime-repl-mode-hook 'override-slime-repl-bindings-with-paredit)
    #+END_SRC
*** smartparens
    This also slow, removing
    #+BEGIN_SRC emacs-lisp
    ;; (require 'smartparens-config)
    ;; (add-hook 'web-mode-hook #'smartparens-mode)
    ;; (add-hook 'emacs-lisp-mode-hook #'smartparens-mode)
    ;; (add-hook 'lisp-mode-hook #'smartparens-mode)
    ;; (add-hook 'latex-mode-hook #'SMARTPARENS-MODE)
    #+END_SRC
*** lisp extra font lock
    #+BEGIN_SRC emacs-lisp
      (require 'lisp-extra-font-lock)
      (lisp-extra-font-lock-global-mode 1)
      (font-lock-add-keywords
       'emacs-lisp-mode
       '(("(\\s-*\\(\\_<\\(?:\\sw\\|\\s_\\)+\\)\\_>"
	  1 'font-lock-func-face))
       'append) ;; <-- Add after all other rules

    #+END_SRC
*** rainbow delimiters
    #+BEGIN_SRC emacs-lisp
    (require 'rainbow-delimiters)
    (add-hook 'lisp-mode-hook 'rainbow-delimiters-mode)

    (cl-loop for index from 1 to rainbow-delimiters-max-face-count
	     do
	     (let ((face
		    (intern (format "rainbow-delimiters-depth-%d-face" index))))
	       (cl-callf color-saturate-name (face-foreground face) 30)))
    #+END_SRC
** Word Processing
*** markdown pandoc
    #+BEGIN_SRC emacs-lisp
  (setq markdown-command "pandoc")
    #+END_SRC
*** LaTeX
    #+BEGIN_SRC emacs-lisp
  (latex-preview-pane-enable)
  (require 'latex-pretty-symbols)
    #+END_SRC
** VSCode Icons
   #+begin_src emacs-lisp
     (use-package vscode-icon
       :ensure t
       :commands (vscode-icon-for-file))
   #+end_src
** Projectile
   #+begin_src emacs-lisp
     (projectile-mode +1)
     (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
     (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
   #+end_src
** iBuffer & Dired
   #+BEGIN_SRC emacs-lisp
     (setq ibuffer-saved-filter-groups
	   '(("home"
	      ("emacs-config" (or (filename . "emacs-config")
				  (filename . "djr-init")
				  (filename . "README.org")))
	      ("Org" (or (mode . org-mode)
			 (filename . "OrgMode")))
	      ("lisp" (or (filename . "*.lisp")
			  (filename . "*.lsp")
			  (filename . "*.el")
			  (filename . "*.asd")
			  (filename . "*.clm")
			  (mode . lisp-mode)))
	      ("Web Dev" (or (mode . html-mode)
			     (mode . web-mode)
			     (mode . js2-mode)
			     (mode . jsx-mode)))
	      ("CSS" (or (mode . css-mode)
			 (mode . scss-mode)
			 (filename . "*.css")
			 (filename . "*.scss")))
	      ("ERC" (mode . erc-mode))
	      ("Shells/Terminals/REPLs" (or (name . "\*eshell\*")
					    (name . "\*terminal\*")
					    (name . "\*slime-repl sbcl\*")
					    (name . "\*shell\*")))
	      ("Logs" (or (name . "\*Messages\*")
			  (name . "\*slime-events\*")
			  (name . "\*inferior-lisp\*")
			  (name . "\*lsp-log\*")
			  (name . "\*jsts-ls\*")
			  (name . "\*jsts-log\*")
			  (name . "\*jsts-ls::stderr\*")))
	      ("Help" (or (name . "\*Help\*")
			  (name . "\*Apropos\*")
			  (name . "\*Completions\*")
			  (name . "\*info\*")))
	      ("Misc" (or  (name . "untitled")
			   (name . "\*scratch\*"))))))
     (add-hook 'ibuffer-mode-hook
	       '(lambda ()
		  (ibuffer-switch-to-saved-filter-groups "home")))
     (setq ibuffer-expert t)
     (setq ibuffer-show-empty-filter-groups nil)
     (add-hook 'ibuffer-mode-hook
	       '(lambda ()
		  (ibuffer-auto-mode 1)
		  (ibuffer-switch-to-saved-filter-groups "home")))
     (setq dired-auto-revert-buffer t
	   auto-revert-verbose nil)

   #+END_SRC
**** Dired-tree
     #+begin_src emacs-lisp
       (use-package dired-sidebar
	 ;; :bind (("C-x n" . dired-sidebar-toggle-sidebar))
	 :ensure t
	 :commands (dired-sidebar-toggle-sidebar)
	 :init
	 (add-hook 'dired-sidebar-mode-hook
		   (lambda ()
		     (unless (file-remote-p default-directory)
		       (auto-revert-mode))))
	 :config
	 (push 'toggle-window-split dired-sidebar-toggle-hidden-commands)
	 (push 'rotate-windows dired-sidebar-toggle-hidden-commands)

	 (setq dired-sidebar-subtree-line-prefix "__")
	 (setq dired-sidebar-theme 'vscode)
	 (setq dired-sidebar-use-term-integration t)
	 (setq dired-sidebar-use-custom-font t))
     #+end_src
** Org
*** org-mode dates
    #+BEGIN_SRC emacs-lisp
    (setq-default org-display-custom-times t)
    (setq org-time-stamp-custom-formats '("<%e %B %Y>" . "<%a, %e %b %Y %H:%M>"))
    (require 'ox)
    (defun endless/filter-timestamp (trans back _comm)
      "Remove <> around time-stamps."
      (pcase back
	((or `jekyll `html)
	 (replace-regexp-in-string "&[lg]t;" "" trans))
	(`latex
	 (replace-regexp-in-string "[<>]" "" trans))))
    (add-to-list 'org-export-filter-timestamp-functions
		 #'endless/filter-timestamp)
    #+END_SRC
*** Org tempo
    #+BEGIN_SRC emacs-lisp
      (require 'org-tempo)
      (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    #+END_SRC
*** org-reveal
    #+BEGIN_SRC emacs-lisp
  ;; Reveal.js + Org mode
  (require 'ox-reveal)
  (setq Org-Reveal-root (concatenate 'string "file://" (expand-file-name "~/reveal.js")))

  (setq Org-Reveal-title-slide nil)
    #+END_SRC
*** org bullets
    #+BEGIN_SRC emacs-lisp
    (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
    #+END_SRC
*** org capture
    #+begin_src emacs-lisp
      (custom-set-variables
       '(org-directory (expand-file-name "~/org"))
       '(org-agenda-files (list org-directory)))
      (setq org-default-notes-file (concat org-directory "/notes.org"))
    #+end_src
** Eshell syntax highlighting
   Taken from [[https://github.com/akreisher/eshell-syntax-highlighting/][here]].
   #+begin_src emacs-lisp
     (use-package eshell-syntax-highlighting
       :after esh-mode
       :demand t ;; Install if not already installed.
       :config
       ;; Enable in all Eshell buffers.
       (eshell-syntax-highlighting-global-mode +1))
   #+end_src
