* org-init
  :PROPERTIES:
  :header-args: :results silent :tangle yes
  :END:
  This is my initialisation file for Emacs. Behold!, the code blocks will be
  compiled at startup, but not these titles or this text.
** Customisations
   #+begin_src emacs-lisp
     (setq custom-file (expand-file-name "~/.emacs.d/djr-custom.el"))
     (load custom-file)
     (set-variable 'meta-flag 't)
     (define-key esc-map "?" 'describe-key-briefly)
     (require 'saveplace)
     (setq-default save-place t)
     (setq make-backup-files nil)
     (setq debug-on-error t)
     (setq case-fold-search t)
     ;; ignore case when switching buffers with C-x b
     (setq read-buffer-completion-ignore-case t)
     (fset 'yes-or-no-p 'y-or-n-p)
     (delete-selection-mode 1)
     (setq ead-buffer-completion-ignore-case t)
     (setq standard-indent 2)
   #+end_src
** Package Managers
*** Quelpa
    #+begin_src emacs-lisp
      (use-package quelpa
        :if window-system
        :ensure t)

      (use-package quelpa-use-package
        :if window-system
        :ensure t
        :after quelpa)
    #+end_src
** Update
   #+begin_src emacs-lisp
 ;    (use-package auto-package-update
 ;      :ensure t
 ;      :config
 ;      (setq auto-package-update-delete-old-versions t)
 ;      (setq auto-package-update-hide-results t)
 ;      (auto-package-update-maybe))
   #+end_src
** Optimisations
   #+begin_src emacs-lisp
     (setq gc-cons-threshold (* 100 1024 1024)
           read-process-output-max (* 1024 1024)
           create-lockfiles nil) ;; lock files will kill `npm start'
   #+end_src
** Custom functions
*** enable-minor-mode
    #+begin_src emacs-lisp
      (defun enable-minor-mode (my-pair)
        "Enable minor mode if filename match the regexp. MY-PAIR is a cons cell (regexp . minor-mode)."
        (if (buffer-file-name)
            (if (string-match (car my-pair) buffer-file-name)
                (funcall (cdr my-pair)))))
    #+end_src
** PATH
   #+BEGIN_SRC emacs-lisp
     (use-package exec-path-from-shell
       :ensure t
       :if (memq window-system '(mac ns x))
       :config (setq default-directory (expand-file-name "~/"))
       (setenv "SHELL" "/bin/zsh")
       (exec-path-from-shell-initialize)
       (exec-path-from-shell-copy-envs
	'("PATH"))
       (if (and (fboundp 'native-comp-available-p)
		(native-comp-available-p))
	   (progn
	     (message "Native comp is available")
	     ;; Using Emacs.app/Contents/MacOS/bin since it was compiled with
	     ;; ./configure --prefix="$PWD/nextstep/Emacs.app/Contents/MacOS"
	     (add-to-list 'exec-path (concat invocation-directory "bin") t)
	     (setenv "LIBRARY_PATH" (concat (getenv "LIBRARY_PATH")
					    (when (getenv "LIBRARY_PATH")
					      ":")
					    ;; This is where Homebrew puts gcc libraries.
					    (car (file-expand-wildcards
						  (expand-file-name "/usr/local/opt/gcc/lib/gcc/*")))))
	     ;; Only set after LIBRARY_PATH can find gcc libraries.
	     (setq comp-deferred-compilation t))
	 (message "Native comp is *not* available")))

     ;; (when (file-exists-p (expand-file-name  "/Library/TeX/texbin"))
     ;;   (setenv "PATH" (concat "/Library/TeX/texbin:"
     ;;                          (getenv "PATH")))
     ;;   (add-to-list 'exec-path "/Library/TeX/texbin"))
     ;; (setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
     ;; (setq exec-path (append exec-path '("/usr/local/bin")))
     ;; (add-to-list 'exec-path exec-path default-directory)
     ;; (add-to-list 'exec-path exec-path (expand-file-name "~/.emacs.d"))
     ;; (add-to-list 'exec-path (expand-file-name "~/.local/bin"))
     
   #+END_SRC
** Buffers and Panes
*** buffer-move
    #+BEGIN_SRC emacs-lisp
      (use-package buffer-move
        :ensure t
        :bind (("s-C-<up>" . buf-move-up)
               ("s-C-<down>" . buf-move-down)
               ("s-C-<left>" . buf-move-left)
               ("s-C-<right>" . buf-move-right)))
    #+END_SRC
*** Panes
    #+BEGIN_SRC emacs-lisp
      (when (display-graphic-p)
        (add-to-list 'initial-frame-alist '(fullscreen . maximized))
        (add-to-list 'default-frame-alist '(fullscreen . maximized)))
      ;;; Use the commands "control+x" followed by an arrow to
      ;;; navigate between panes
      (global-set-key (kbd "C-x <up>") 'windmove-up)
      (global-set-key (kbd "C-x <down>") 'windmove-down)
      (global-set-key (kbd "C-x <left>") 'windmove-left)
      (global-set-key (kbd "C-x <right>") 'windmove-right)
    #+END_SRC
*** zoom mode
    #+BEGIN_SRC emacs-lisp
      (custom-set-variables
       '(zoom-mode t))
    #+END_SRC
** Cosmetic
*** autofill
    #+BEGIN_SRC emacs-lisp
      (setq-default fill-column 80)
      (toggle-text-mode-auto-fill)
      (add-hook 'prog-mode-hook 'turn-on-auto-fill)
      (remove-hook 'nxml-mode-hook #'turn-on-auto-fill)
      (remove-hook 'jinja2-mode-hook #'turn-on-auto-fill)
      (remove-hook 'yaml-mode-hook #'turn-on-auto-fill)
      (display-fill-column-indicator-mode t)
    #+End_SRC
*** new UNTITLED file
    #+BEGIN_SRC emacs-lisp
      ;; keybinding for this is in the key bindings menu
      ;; `C-c n'
      (defun djr-new-buffer-frame ()
        "Create a new frame with a new empty buffer."
        (interactive)
        (let ((buffer (generate-new-buffer "untitled")))
          (set-buffer-major-mode buffer)
          (display-buffer buffer '(display-buffer-pop-up-frame . nil))))
    #+END_SRC
*** fast-scroll
    #+BEGIN_SRC emacs-lisp
      (use-package fast-scroll
        :ensure t)
    #+END_SRC
*** dimmer-mode
    #+BEGIN_SRC emacs-lisp
      (use-package dimmer
        :if window-system
        :defer 1
        :config
        (setq dimmer-exclusion-predicates
              '(helm--alive-p window-minibuffer-p echo-area-p))
        (setq dimmer-exclusion-regexp-list
              '("^\\*[h|H]elm.*\\*" "^\\*Minibuf-[0-9]+\\*"
                "^.\\*which-key\\*$" "^*Messages*" "*LV*"
                "^*[e|E]cho [a|A]rea 0*" "*scratch*"
                "transient"))
        (dimmer-mode t))
    #+END_SRC
*** telephone-line
    #+BEGIN_SRC emacs-lisp
      (use-package telephone-line
        :if window-system
        :ensure t
        :config (setq telephone-line-lhs
                      '((accent . (telephone-line-vc-segment
                                   telephone-line-erc-modified-channels-segment
                                   telephone-line-process-segment))
                        (nil    . (telephone-line-buffer-segment
                                   telephone-line-minor-mode-segment
                                   )))
                      telephone-line-rhs
                      '((nil    . (telephone-line-misc-info-segment))
                        (accent . (telephone-line-major-mode-segment)))))
      (telephone-line-mode t)
    #+END_SRC
*** active buffer
    #+begin_src emacs-lisp
      (when (display-graphic-p)
        (set-face-attribute  'mode-line
                             nil
                             :foreground "black"
                             :background "gray96";;"gray25"
                             :box '(:line-width 1 :style released-button))
        (set-face-attribute  'mode-line-inactive
                             nil
                             :foreground "gray96"
                             ;; :background "white"
                             :box '(:line-width 1 :style released-button)))
    #+end_src
*** transpose-frame
    #+begin_src emacs-lisp
      (use-package transpose-frame
        :if window-system
        :ensure t
        :bind ("C-x tf" . transpose-frame))
    #+end_src
*** tabs
    #+begin_src emacs-lisp
      (setq-default indent-tabs-mode nil)
      (setq-default tab-always-indent 'complete)
      (global-set-key (kbd "S-M-t") 'indent-rigidly-left)
    #+end_src
** Code wrap
   #+begin_src emacs-lisp
     (global-set-key (kbd "M-[") 'insert-pair)
     (global-set-key (kbd "M-{") 'insert-pair)
     (global-set-key (kbd "M-\"") 'insert-pair)
     (global-set-key (kbd "M-'") 'insert-pair)
     (global-set-key (kbd "M-<backspace>") 'delete-pair)
   #+end_src
** File Types & modes
   #+BEGIN_SRC emacs-lisp
          (setq auto-mode-alist
                (append '(("\\.c\\'"       . c-mode)
                          ("\\.cs\\'"      . csharp-mode)
                          ("\\.txt\\'"     . text-mode)
                          ("\\.md\\'"      . markdown-mode)
                          ("\\.cpp\\'"     . c++-mode)
                          ("\\.CPP\\'"     . c++-mode)
                          ("\\.h\\'"       . c-mode)
                          ("\\.lsp\\'"     . lisp-mode)
                          ("\\.cl\\'"      . lisp-mode)
                          ("\\.cm\\'"      . lisp-mode)
                          ("\\.lisp\\'"    . lisp-mode)
                          ("\\.clm\\'"     . lisp-mode)
                          ("\\.ins\\'"     . lisp-mode)
                          ("\\.el\\'"      . lisp-mode)
                          ("\\.el.gz\\'"   . lisp-mode)
                          ("\\.ws\\'"      . lisp-mode)
                          ("\\.asd\\'"     . lisp-mode)
                          ("\\.yaml\\'"     . yaml-mode)
                          ("\\.py\\'"      . python-mode)
                          ("\\.ly\\'"      . lilypond-mode)
                          ("\\.js\\'"      . web-mode)
                          ("\\.json\\'"    . json-mode)
                          ("\\.jinja\\'"   . jinja2-mode)
                          ("\\.tex\\'"     . latex-mode)
                          ("\\.cls\\'"     . latex-mode)
                          ("\\.java\\'"    . java-mode)
                          ("\\.ascii\\'"   . text-mode)
                          ("\\.sql\\'"     . sql-mode)
                          ("\\.pl\\'"      . perl-mode)
                          ("\\.php\\'"     . php-mode)
                          ("\\.jxs\\'"     . shader-mode)
                          ("\\.sh\\'"      . shell-mode)
                          ("\\.gnuplot\\'" . shell-mode)
                          ("\\.svg\\'"     . nxml-mode))
                        auto-mode-alist))
   #+END_SRC
** Generate Code
*** THREE box
    #+begin_src emacs-lisp
      (defun three-box ()
        (interactive)
        (insert "<mesh>")
        (newline)
        (insert "  <boxBufferGeometry attach='geometry' args={[1, 1, 1]} />")
        (newline)
        (insert "  <meshStandardMaterial attach='material' />")
        (newline)
        (insert "</mesh>"))
    #+end_src
*** Add sc-deftest
    #+BEGIN_SRC emacs-lisp
      (defun sc-deftest-template (test)
        (interactive "sdef-test name: ")
        (insert "(sc-deftest test-")
        (insert test)
        (insert " ()")
        (newline)
        (insert "  (let* (())")
        (newline)
        (insert "    (sc-test-check ")
        (newline)
        (insert "    )))"))
    #+END_SRC
*** js-80-slash
    #+BEGIN_SRC emacs-lisp
      (defun js-80-slash ()
        (interactive)
        (cl-loop repeat 80 do (insert "/")))
    #+END_SRC
*** lisp-80-slash
    #+BEGIN_SRC emacs-lisp
      (defun lisp-80-slash ()
        (interactive)
        (cl-loop repeat 80 do (insert ";")))
    #+END_SRC
*** React boilerplate
    #+BEGIN_SRC emacs-lisp
      (defun react-boilerplate (name)
        (interactive "sFunction Name: ")
        (js2-mode)
        (insert "import React from 'react';")
        (newline)
        (newline)
        (insert "function ")
        (insert name)
        (insert "() {")
        (newline)
        (newline)
        (insert "    return ();")
        (newline)
        (insert "};")
        (newline)
        (newline)
        (insert "export default ")
        (insert name)
        (insert ";"))
    #+END_SRC
*** Web boilerplate
    #+BEGIN_SRC emacs-lisp
      (defun web-boilerplate (page-title)
        (interactive "sHTML Title: ")
        (web-mode)
        (insert "<!DOCTYPE html>")
        (newline)
        (insert "<html>")
        (newline)
        (insert "    <head>")
        (newline)
        (insert "	<title>")
        (insert page-title)
        (insert "</title>")
        (newline)
        (insert "    </head>")
        (newline)
        (insert "    <body>")
        (newline)
        (newline)
        (insert "       <h1>This is a Heading</h1>")
        (newline)
        (insert "        <p>This is a paragraph.</p>")
        (newline)
        (newline)
        (insert "    </body>")
        (newline)
        (insert "</html>"))
    #+END_SRC
*** ROBODOC
    #+BEGIN_SRC emacs-lisp
      (defun elisp-depend-filename (fullpath)
        "Return filename without extension and path.
         FULLPATH is the full path of file."
        (file-name-sans-extension (file-name-nondirectory fullpath)))
      (defun robodoc-fun ()
        ;; "Put robodoc code around a funciton definition"
        ;; (interactive "r")
        (interactive)
        (save-excursion
          (backward-sexp)
          (let* ((beg (point))
                 (end (progn (forward-sexp) (point)))
                 (name (buffer-substring beg end))
                 (buffer (elisp-depend-filename (buffer-file-name)))
                 ;; (buffer-name))
                 ;; is this defun or defmethod
                 (letter (progn
                           (backward-sexp 2)
                           (let* ((beg (point))
                                  (end (progn (forward-sexp) (point)))
                                  (fun (buffer-substring beg end)))
                             ;; (insert (preceding-sexp))
                             (if (string= fun "defun")
                                 "f"
                               "m")))))
            (beginning-of-line)
            (newline)
            (previous-line)
            (newline)
            (insert
             ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;")
            (newline)
            (insert ";;; ****" letter "* " buffer "/" name)
            ;; (insert ";;; ****" letter "*" buffer "/" name)
            (newline)
            ;; (insert ";;; FUNCTION")
            ;; (newline)
            (insert ";;; AUTHOR")
            (newline)
            (insert ";;; Daniel Ross (mr.danielross[at]gmail[dot]com) ")
            (newline)
            (insert ";;; ")
            (newline)
            (robodoc-fun-aux "DATE")
            (robodoc-fun-aux "DESCRIPTION")
            ;; (insert ";;; " name ":")
            ;; (newline)
            ;; (insert ";;;")
            ;; (newline)
            ;; (insert ";;;")
            ;; (newline)
            (robodoc-fun-aux "ARGUMENTS")
            (robodoc-fun-aux "OPTIONAL ARGUMENTS")
            (robodoc-fun-aux "RETURN VALUE")
            (insert ";;; EXAMPLE")
            (newline)
            (insert "#|")
            (newline)
            (newline)
            (insert "|#")
            (newline)
            (insert ";;; SYNOPSIS")
            (next-line)
            (forward-sexp 2)
            (newline)
            (insert ";;; ****"))))

      (defun robodoc-fun-aux (tag)
        (insert ";;; " tag)
        (newline)
        (insert ";;; ")
        (newline)
        (insert ";;; ")
        (newline))
    #+END_SRC
** Node
   #+begin_src emacs-lisp
     (use-package add-node-modules-path
       :ensure t
       :defer t
       :config
       (eval-after-load 'js-mode
         '(add-hook 'js-mode-hook #'add-node-modules-path))
       (eval-after-load 'web-mode
         '(add-hook 'web-mode-hook #'add-node-modules-path)))
   #+end_src
** Non Elpa/Melpa Package Modes
*** Antescofo mode
    #+BEGIN_SRC emacs-lisp
      (when (file-directory-p
             (expand-file-name "~/site-lisp/antesc-mode-master/"))
        ;; Antescofo text highlighting
        ;; Thanks to Pierre Donat-Bouillud
        ;; https://github.com/programLyrique/antesc-mode
        (add-to-list 'load-path (expand-file-name "~/site-lisp/antesc-mode-master"))
        (autoload 'antesc-mode "antesc-mode" "Major mode for editing Antescofo code" t)

        ;; Extensions for antescofo mode
        (setq auto-mode-alist
              (append '(("\\.\\(score\\|asco\\)\\.txt$" . antesc-mode))
                      auto-mode-alist)))
    #+END_SRC
*** Lilypond mode
    #+BEGIN_SRC emacs-lisp
      (when (file-exists-p
             (expand-file-name "~/site-lisp/lilypond-init.el"))
        ;; Antescofo text highlighting
        ;; Thanks to Pierre Donat-Bouillud
        ;; https://github.com/programLyrique/antesc-mode
        ;; lilypond mode
        (add-to-list 'load-path (expand-file-name "~/site-lisp"))
        (load (expand-file-name "~/site-lisp/lilypond-init.el")))
    #+END_SRC
** Completions: Company, Flyspell, FlyCheck, Minibuffer auto-complete, Fido
*** Company
    #+begin_src emacs-lisp
      (use-package company
        :ensure t
        :bind ("C-`" . 'company-complete-common)
        :custom ((company-idle-delay 0.0)
                 (company-minimum-prefix-length 1))
        :init (add-hook 'after-init-hook 'global-company-mode))
    #+end_src
*** Flyspell
    Taken from [[https://stackoverflow.com/questions/17126951/emacs-cannot-find-flyspell-ispell][here]].
    You need to install the ASpell spell checker. You can install it with homebrew
    with `brew install aspell`.
    #+BEGIN_SRC emacs-lisp
      ;; flyspell
      (dolist (hook '(text-mode-hook markdown-mode-hook))
        (add-hook hook (lambda () (flyspell-mode 1))))
      (dolist (hook '(lisp-mode-hook web-mode-hook js2-mode-hook))
        (add-hook hook (lambda () (flyspell-prog-mode))))
      (setq flyspell-issue-message-flag nil)
      (defun flyspell-emacs-popup-textual (event poss word)
        "A textual flyspell popup menu."
        (require 'popup)
        (let* ((corrects (if flyspell-sort-corrections
                             (sort (car (cdr (cdr poss))) 'string<)
                           (car (cdr (cdr poss)))))
               (cor-menu (if (consp corrects)
                             (mapcar (lambda (correct)
                                       (list correct correct))
                                     corrects)
                           '()))
               (affix (car (cdr (cdr (cdr poss)))))
               show-affix-info
               (base-menu  (let ((save (if (and (consp affix) show-affix-info)
                                           (list
                                            (list (concat "Save affix: " (car affix))
                                                  'save)
                                            '("Accept (session)" session)
                                            '("Accept (buffer)" buffer))
                                         '(("Save word" save)
                                           ("Accept (session)" session)
                                           ("Accept (buffer)" buffer)))))
                             (if (consp cor-menu)
                                 (append cor-menu (cons "" save))
                               save)))
               (menu (mapcar
                      (lambda (arg) (if (consp arg) (car arg) arg))
                      base-menu)))
          (cadr (assoc (popup-menu* menu :scroll-bar t) base-menu))))
      (eval-after-load "flyspell"
        '(progn
           (fset 'flyspell-emacs-popup 'flyspell-emacs-popup-textual)))

      ;; two-finger clicks for mac
      (eval-after-load "flyspell"
        '(progn
           (define-key flyspell-mouse-map [down-mouse-3] #'flyspell-correct-word)
           (define-key flyspell-mouse-map [mouse-3] #'undefined)))


    #+END_SRC
*** Flycheck
    #+BEGIN_SRC emacs-lisp
      (use-package flycheck
        :ensure t
        :init (global-flycheck-mode))
    #+END_SRC
*** Minibuffer auto-complete
    #+begin_src emacs-lisp
      (setq completion-styles '(basic initials partial-completion flex)) ; > Emacs 27.1
      (setq completion-cycle-threshold 10)
    #+end_src
*** Fido
    #+begin_src emacs-lisp
      (setq fido-mode t)
    #+end_src
*** Bash completion
    #+begin_src emacs-lisp
      (use-package bash-completion
        :defer t
        :ensure t
        :config (bash-completion-setup))
    #+end_src
** lsp-mode
   Got this from [[https://emacs-lsp.github.io/lsp-mode/page/installation/][LSP support for Emacs]] site
   #+BEGIN_SRC emacs-lisp
     ;; (defun check-lsp ()
     ;;     (print (file-name-extension buffer-file-name))
     ;;   (when (or (string-equal "jsx" (file-name-extension buffer-file-name))
     ;;             (string-equal "js" (file-name-extension buffer-file-name))
     ;;             (string-equal "tsx" (file-name-extension buffer-file-name))
     ;;             (string-equal "ts" (file-name-extension buffer-file-name)))
     ;;     #'lsp-deferred))

     (use-package lsp-mode
       :if window-system
       :ensure t
       :commands (lsp lsp-deferred)
       :config (setq lsp-keymap-prefix "C-c l"
                     lsp-headerline-breadcrumb-mode t
                     lsp-log-io nil)
        (enable-minor-mode
         '("\\.jsx?\\'" . lsp-deferred))
        (enable-minor-mode
         '("\\.js?\\'" . lsp-deferred))
        (enable-minor-mode
         '("\\.ts?\\'" . lsp-deferred))
        (enable-minor-mode
         '("\\.tsx?\\'" . lsp-deferred)))
   #+END_SRC
*** lsp-ui
    #+BEGIN_SRC emacs-lisp
      (use-package lsp-ui
        :commands lsp-ui-mode
        :ensure t)
    #+END_SRC
*** lsp-treemacs
    #+begin_src emacs-lisp
 ;     (use-package lsp-treemacs
  ;      :ensure t)
    #+end_src
** Web Dev Stuff
*** js-comint / js2
    #+BEGIN_SRC emacs-lisp
      (use-package js-comint
        :ensure t
        :config
        (setq inferior-js-program-command "/usr/bin/java org.mozilla.javascript.tools.shell.Main")
        (add-hook 'js2-mode-hook
                  '(lambda ()
                     (local-set-key "\C-x\C-e" 'js-send-last-sexp)
                     (local-set-key "\C-\M-x" 'js-send-last-sexp-and-go)
                     (local-set-key "\C-cb" 'js-send-buffer)
                     (local-set-key "\C-c\C-b" 'js-send-buffer-and-go)
                     (local-set-key "\C-cl" 'js-load-file-and-go))))
    #+END_SRC
*** emmet
    #+BEGIN_SRC emacs-lisp
      ;; (use-package emmet-mode
      ;;   :ensure t
      ;;   :hook ((web-mode . (lambda () (emmet-mode)))
      ;;          (css-mode . (lambda () (emmet-mode)))
      ;;          local-write-file-hooks . (lambda () (delete-trailing-whitespace) nil)))
    #+end_src
*** web-mode
    #+begin_src emacs-lisp
      (use-package web-mode
        :ensure t
        :mode (("\\.jsx$"     . web-mode)
               ("\\.html$"    . web-mode)
               ("\\.ejs$"     . web-mode)
               ("\\.htm$"     . web-mode)
               ("\\.shtml$"   . web-mode)
               ("\\.tsx$"     . web-mode)
               ("\\.ts$"      . web-mode))
        :config (setq web-mode-enable-auto-quoting nil))
    #+END_SRC
**** web-mode-indent
     #+BEGIN_SRC emacs-lisp
       (defun my-setup-indent (n)
         ;; java/c/c++
         (setq-local c-basic-offset n)
         ;; web development
         (setq-local indent-tabs-mode nil)
         (setq-local tab-width n)
         (setq typescript-indent-level n)
         (setq-local web-mode-markup-indent-offset n) ; web-mode, html tag in html file
         (setq-local web-mode-css-indent-offset n) ; web-mode, css in html file
         (setq-local web-mode-code-indent-offset n) ; web-mode, js code in html file
         (setq-local css-indent-offset n)) ; css-mode

       (defun my-web-code-style ()
         (interactive)
         ;; use tab instead of space
         (setq-local indent-tabs-mode t)
         ;; indent 4 spaces width
         (my-setup-indent 2))

       (add-hook 'web-mode-hook 'my-web-code-style)
     #+END_SRC
*** prettier-js-mode
    #+BEGIN_SRC emacs-lisp
      (defun local-prettier ()
        (use-package prettier-js
          :ensure t
          :config
        (enable-minor-mode
         '("\\.jsx?\\'" . prettier-js-mode))
        (enable-minor-mode
         '("\\.js?\\'" . prettier-js-mode))
        (enable-minor-mode
         '("\\.ts?\\'" . prettier-js-mode))
        (enable-minor-mode
         '("\\.tsx?\\'" . prettier-js-mode))
        (setq prettier-js-args
              '(
                "--arrow-parens" "always"
                "--semi" "true"
                "--bracket-spacing" "true"
                "--single-quote" "true"
                "--jsx-bracket-same-line" "true"
                "--print-width" "80"
                "--use-tabs" "false"
                "--tab-width" "2"))))

      (defun choose-prettier ()
        (let ((node-path "node_modules/.bin"))
          (dolist (item exec-path)
            (if (and (string-match node-path item)
                     (file-exists-p (concat item "prettier")))
                (return #'prettier-js-mode)
              (return #'local-prettier)))))

      (eval-after-load 'web-mode
        '(progn
           (add-hook 'web-mode-hook #'add-node-modules-path)
           (add-hook 'web-mode-hook #'choose-prettier)))
    #+END_SRC
*** tide
    #+begin_src emacs-lisp
      (use-package tide
        :ensure t
        :after (typescript-mode company flycheck web-mode)
        ;; :hook ((before-save . tide-format-before-save))
        :config (add-hook 'web-mode-hook
                          #'(lambda ()
                              (enable-minor-mode
                               '("\\.ts?\\'" . tide-setup))
                              (enable-minor-mode
                               '("\\.tsx?\\'" . tide-setup))))
        (add-hook 'web-mode-hook
                  #'(lambda ()
                      (enable-minor-mode
                       '("\\.ts?\\'" . tide-hl-identifier-mode))
                      (enable-minor-mode
                       '("\\.tsx?\\'" . tide-hl-identifier-mode)))))
    #+end_src
**** tide-mode
     #+begin_src emacs-lisp
       (defun setup-tide-mode ()
         (interactive)
         (tide-setup)
         (flycheck-mode +1)
         (setq flycheck-check-syntax-automatically '(save mode-enabled))
         (eldoc-mode +1)
         (tide-hl-identifier-mode +1)
         ;; company is an optional dependency. You have to
         ;; install it separately via package-install
         ;; `M-x package-install [ret] company`
         (company-mode +1))

       ;; aligns annotation to the right hand side
       (setq company-tooltip-align-annotations t)

       ;; formats the buffer before saving
       ;; (add-hook 'before-save-hook 'tide-format-before-save)

       ;; (add-hook 'typescript-mode-hook #'setup-tide-mode)
       ;; (setq tide-format-options
       ;;       '(:insertSpaceAfterFunctionKeywordForAnonymousFunctions
       ;;         t
       ;;         :placeOpenBraceOnNewLineForFunctions
       ;;         nil
       ;;         :indentSize 2
       ;;         :tabSize 2
       ;;         :insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces
       ;;         t))
     #+end_src
**** tsx
     #+begin_src emacs-lisp
       (add-hook 'web-mode-hook
                 (lambda ()
                   (when (string-equal "tsx" (file-name-extension buffer-file-name))
                     (setup-tide-mode))))
       ;; enable typescript-tslint checker
       (flycheck-add-mode 'typescript-tslint 'web-mode)
     #+end_src
**** jsx
     #+begin_src emacs-lisp
       (add-hook 'web-mode-hook
                 (lambda ()
                   (when (string-equal "jsx" (file-name-extension buffer-file-name))
                     (setup-tide-mode))))
       ;; configure jsx-tide checker to run after your default jsx checker
       ;; (flycheck-add-mode 'javascript-eslint 'web-mode)
       ;; dunno
       ;; (flycheck-add-next-checker 'javascript-eslint 'jsx-tide 'append)
     #+end_src
*** eslint-fix
    #+begin_src emacs-lisp
      (use-package eslint-fix
        :ensure t
        ;; :load-path
        ;; "https://raw.githubusercontent.com/codesuki/eslint-fix/master/eslint-fix.el"
        :config (eval-after-load 'js-mode
                  '(add-hook 'js-mode-hook
                             (lambda ()
                               (add-hook 'after-save-hook
                                         'eslint-fix nil t))))
        ;; (eval-after-load 'web-mode
        ;;   '(add-hook 'web-mode-hook
        ;;              (lambda ()
        ;;                (add-hook 'after-save-hook 'eslint-fix nil t))))
        )
    #+end_src
*** jinja
    #+begin_src emacs-lisp
      (use-package jinja2-mode
        :ensure t)
    #+end_src
*** yaml
    #+begin_src emacs-lisp
      (use-package yaml-mode
        :ensure t)
    #+end_src
** CSS
*** Indenting & brackets
    #+begin_src emacs-lisp
      (setq css-electric-semi-behavior t
            css-indent-offset  2
            css-tab-mode 'auto)
    #+end_src
*** Prettier CSS
    #+begin_src emacs-lisp
      (add-hook 'css-mode-hook #'prettier-js-mode)
    #+end_src
*** Remove leading zeros
    This undoes the formatting by `prettier` to conform with Google's style guide.
    i.e. `.3s` becomes `.3s`
    #+begin_src emacs-lisp
      (defun remove-decimal-zero ()
        (replace-regexp "0\\." "."))

      (add-hook 'css-mode-hook 
                (lambda () 
                  (add-hook 'before-save-hook 'remove-decimal-zero nil 'local)))
      (add-hook 'scss-mode-hook 
                (lambda () 
                  (add-hook 'before-save-hook 'remove-decimal-zero nil 'local)))
    #+end_src

** JSON
   #+begin_src emacs-lisp
     (use-package json-mode
       :ensure t
       :defer t)
   #+end_src
** Lisp stuff
*** SBCL
    #+BEGIN_SRC emacs-lisp
      ;; Set your lisp system and, optionally, some contribs
      (setq inferior-lisp-program "/opt/sbcl/bin/sbcl")
      (let ((sbcl-local (car (file-expand-wildcards
                              "/usr/local/Cellar/sbcl/*/lib/sbcl/sbcl.core"))))
        (setq slime-lisp-implementations
              `((sbcl ("/usr/local/bin/sbcl"
                       "--core"
                       ;; replace with correct path of sbcl
                       ,sbcl-local
                       "--dynamic-space-size" "2147")))))
    #+end_src
*** slime
    #+begin_src emacs-lisp
      ;; slime
      (use-package slime
        :ensure t
        :hook (slime-repl-mode-hook . slime-repl-ansi-color-mode))
    #+end_src
*** slime-repl-ansi-color
    #+begin_src emacs-lisp
      (use-package slime-repl-ansi-color
        :ensure t
        :after slime-repl
        :requires slime)
    #+END_SRC
*** paredit
    Man, this is slow. Removing it for now.
    #+BEGIN_SRC emacs-lisp
      ;; (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
      ;; (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
      ;; (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
      ;; (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
      ;; (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
      ;; (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
      ;; (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
      ;; (add-hook 'slime-repl-mode-hook (lambda () (paredit-mode +1)))
      ;; ;; Stop SLIME's REPL from grabbing DEL,
      ;; ;; which is annoying when backspacing over a '('
      ;; (defun override-slime-repl-bindings-with-paredit ()
      ;;   (define-key slime-repl-mode-map
      ;;     (read-kbd-macro paredit-backward-delete-key) nil))
      ;; (add-hook 'slime-repl-mode-hook 'override-slime-repl-bindings-with-paredit)
    #+END_SRC
*** smartparens
    This also slow, removing
    #+BEGIN_SRC emacs-lisp
      ;; (require 'smartparens-config)
      ;; (add-hook 'web-mode-hook #'smartparens-mode)
      ;; (add-hook 'emacs-lisp-mode-hook #'smartparens-mode)
      ;; (add-hook 'lisp-mode-hook #'smartparens-mode)
      ;; (add-hook 'latex-mode-hook #'SMARTPARENS-MODE)
    #+END_SRC
*** lisp extra font lock
    #+BEGIN_SRC emacs-lisp
      (use-package lisp-extra-font-lock
        :ensure t
        :config (lisp-extra-font-lock-global-mode 1)
        (font-lock-add-keywords
         'emacs-lisp-mode
         '(("(\\s-*\\(\\_<\\(?:\\sw\\|\\s_\\)+\\)\\_>"
            1 'font-lock-function-name-face))
         'append)) ;; <-- Add after all other rules
    #+END_SRC
** Rainbow delimiters
   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-delimiters
       :ensure t
       :hook (prog-mode-hook .  rainbow-delimiters-mode); (lisp-mode-hook . rainbow-delimiters-mode)
       :config (cl-loop for index from 1 to rainbow-delimiters-max-face-count
                        do
                        (let ((face
                               (intern (format "rainbow-delimiters-depth-%d-face" index))))
                          (cl-callf color-saturate-name (face-foreground face) 30))))
   #+END_SRC
** Word Processing
*** auctex
    Taken from [[https://github.com/jwiegley/use-package/issues/379][this github issue]].
    #+begin_src emacs-lisp
      (use-package  auctex
        :defines (latex-help-cmd-alist latex-help-file)
        :mode ("\\.tex\\'" . TeX-latex-mode)
        :ensure t
        :init
        (setq reftex-plug-into-AUCTeX t)
        (setenv "PATH" (concat "/Library/TeX/texbin:"
                               (getenv "PATH")))
        (add-to-list 'exec-path "/Library/TeX/texbin")
        :config
        (defun latex-help-get-cmd-alist () ;corrected version:
          "Scoop up the commands in the index of the latex info manual.
       The values are saved in `latex-help-cmd-alist' for speed."
          ;; mm, does it contain any cached entries
          (if (not (assoc "\\begin" latex-help-cmd-alist))
              (save-window-excursion
                (setq latex-help-cmd-alist nil)
                (info-goto-node (concat latex-help-file "Command Index"))
                (goto-char (point-max))
                (while (re-search-backward "^\\* \\(.+\\): *\\(.+\\)\\." nil t)
                  (let ((key (buffer-substring (match-beginning 1) (match-end 1)))
                        (value (buffer-substring (match-beginning 2)
                                                 (match-end 2))))
                    (add-to-list 'latex-help-cmd-alist (cons key value))))))
          latex-help-cmd-alist))

      (use-package latex
        :ensure auctex
        :defer t
        :config
        (use-package preview)
        (use-package info-look)
        (add-hook 'LaTeX-mode-hook 'reftex-mode)
        (info-lookup-add-help :mode 'LaTeX-mode
                              :regexp ".*"
                              :parse-rule "\\\\?[a-zA-Z]+\\|\\\\[^a-zA-Z]"
                              :doc-spec '(("(latex2e)Concept Index" )
                                          ("(latex2e)Command Index"))))
    #+end_src
*** markdown pandoc
    #+BEGIN_SRC emacs-lisp
      (setq markdown-command "pandoc")
    #+END_SRC
*** LaTeX
    #+BEGIN_SRC emacs-lisp
      ;; (use-package auctex
      ;;   :ensure t
      ;;   :if window-system
      ;;   :config
      ;;     (latex-preview-pane-enable)
      ;;     (require 'latex-pretty-symbols))
    #+END_SRC
** Projectile
   #+begin_src emacs-lisp
     (use-package projectile
       :ensure t
       :config
       (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
       :init (projectile-mode +1))
   #+end_src
** iBuffer & Dired
*** iBuffer
    #+BEGIN_SRC emacs-lisp
      (setq ibuffer-saved-filter-groups
            '(("home"
               ("GIT" (or (name . "^magit")
                          (name . "^ediff")
                          (name . "\\.git")))
               ("jsx/tsx" (or (name . "\\.jsx")
                              (name . "\\.tsx")))
               ("js/ts" (or (name . "\\.js")
                            (name . "\\.ts")))
               ("Web Dev" (or (mode . html-mode)
                              (name . "\\.html")
                              (mode . jinja2-mode)))
               ("CSS" (or (mode . css-mode)
                          (mode . scss-mode)
                          (name . "\\.css")
                          (name . "\\.scss")))
               ("Python" (or (mode . python-mode)
                             (name . "\\.py")))
               ("JSON/Config" (or (mode . json-mode)
                                  (name . "\\.json")
                                  (mode . kintaro-mode)
                                  (name . "\\.ksdl")))
               ("SVG" (name . "\\.svg"))
               ("ERC" (mode . erc-mode))
               ("find" (or (mode . xref-mode)
                           (mode . dired-mode)))
               ("emacs-config" (or (name . "emacs-config")
                                   (name . "djr-init")
                                   (name . "README.org")
                                   (name . "init.el")))
               ("Org" (mode . org-mode))
               ("lisp" (or (name . "\\.lisp")
                           (name . "\\.lsp")
                           (name . "\\.el")
                           (name . "\\.asd")
                           (name . "\\.clm")
                           (mode . lisp-mode)))
               ("Shell Scripts" (or (name . "\\.sh")
                                    (mode . "sh-mode")))
               ("Shells/Terminals/REPLs" (or (name . "\\*eshell\\*")
                                             (name . "\\*terminal\\*")
                                             (name . "\\*slime-repl sbcl\\*")
                                             (name . "\\*shell\\*")))
               ("Logs" (or (name . "\\*Messages\\*")
                           (name . "\\*slime-events\\*")
                           (name . "\\*inferior-lisp\\*")
                           (name . "\\*lsp")
                           (name . "\\*jsts")
                           (name . "\\*tide")
                           (name . "\\*eslint")))
               ("Help" (or (name . "\\*Help\\*")
                           (name . "\\*Apropos\\*")
                           (name . "\\*Completions\\*")
                           (name . "\\*info\\*")))
               ("Misc" (or  (name . "untitled")
                            (name . "\\*scratch\\*"))))))
      (setq ibuffer-expert t)
      (setq ibuffer-show-empty-filter-groups nil)
      (add-hook 'ibuffer-mode-hook
                '(lambda ()
                   (ibuffer-auto-mode 1)
                   (ibuffer-switch-to-saved-filter-groups "home")))
      (setq dired-auto-revert-buffer t
            auto-revert-verbose nil)

    #+END_SRC
*** Dired Rainbow
    #+begin_src emacs-lisp
      (use-package dired-rainbow
        :if window-system
        :defer 2
        :config
        (dired-rainbow-define-chmod directory "#6cb2eb" "d.*")
        (dired-rainbow-define html "#eb5286" ("css" "less" "sass" "scss" "htm" "html" "jhtm" "mht" "eml" "mustache" "xhtml"))
        (dired-rainbow-define xml "#f2d024" ("xml" "xsd" "xsl" "xslt" "wsdl" "bib" "json" "msg" "pgn" "rss" "yaml" "yml" "rdata"))
        (dired-rainbow-define document "#9561e2" ("docm" "doc" "docx" "odb" "odt" "pdb" "pdf" "ps" "rtf" "djvu" "epub" "odp" "ppt" "pptx"))
        (dired-rainbow-define markdown "#ffed4a" ("org" "etx" "info" "markdown" "md" "mkd" "nfo" "pod" "rst" "tex" "textfile" "txt"))
        (dired-rainbow-define database "#6574cd" ("xlsx" "xls" "csv" "accdb" "db" "mdb" "sqlite" "nc"))
        (dired-rainbow-define media "#de751f" ("mp3" "mp4" "mkv" "MP3" "MP4" "avi" "mpeg" "mpg" "flv" "ogg" "mov" "mid" "midi" "wav" "aiff" "flac"))
        (dired-rainbow-define image "#f66d9b" ("tiff" "tif" "cdr" "gif" "ico" "jpeg" "jpg" "png" "psd" "eps" "svg"))
        (dired-rainbow-define log "#c17d11" ("log"))
        (dired-rainbow-define shell "#f6993f" ("awk" "bash" "bat" "sed" "sh" "zsh" "vim"))
        (dired-rainbow-define interpreted "#38c172" ("py" "ipynb" "rb" "pl" "t" "msql" "mysql" "pgsql" "sql" "r" "clj" "cljs" "scala" "js"))
        (dired-rainbow-define compiled "#4dc0b5" ("asm" "cl" "lisp" "el" "c" "h" "c++" "h++" "hpp" "hxx" "m" "cc" "cs" "cp" "cpp" "go" "f" "for" "ftn" "f90" "f95" "f03" "f08" "s" "rs" "hi" "hs" "pyc" ".java"))
        (dired-rainbow-define executable "#8cc4ff" ("exe" "msi"))
        (dired-rainbow-define compressed "#51d88a" ("7z" "zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
        (dired-rainbow-define packaged "#faad63" ("deb" "rpm" "apk" "jad" "jar" "cab" "pak" "pk3" "vdf" "vpk" "bsp"))
        (dired-rainbow-define encrypted "#ffed4a" ("gpg" "pgp" "asc" "bfe" "enc" "signature" "sig" "p12" "pem"))
        (dired-rainbow-define fonts "#6cb2eb" ("afm" "fon" "fnt" "pfb" "pfm" "ttf" "otf"))
        (dired-rainbow-define partition "#e3342f" ("dmg" "iso" "bin" "nrg" "qcow" "toast" "vcd" "vmdk" "bak"))
        (dired-rainbow-define vc "#0074d9" ("git" "gitignore" "gitattributes" "gitmodules"))
        (dired-rainbow-define-chmod executable-unix "#38c172" "-.*x.*"))
    #+end_src
*** ls
    #+begin_src emacs-lisp
      (when (string= system-type "darwin")
        (setq dired-use-ls-dired nil))
    #+end_src
** Shortcuts
*** Aliases
    #+BEGIN_SRC emacs-lisp
      (defalias 'pi 'package-install)
      (defalias 'pl 'package-list-packages)
      (defalias 'pr 'package-refresh-contents)
      (defalias 'wm 'web-mode)
      (defalias 'j2 'js2-mode)
      (defalias 'mt 'multi-term)
      (defalias 'rb 'revert-buffer)
      (defalias 'scd 'sc-deftest-template)
      (defalias 'tf 'transpose-frame)
      (defalias 'rbp 'react-boilerplate)
    #+END_SRC
*** Key bindings
    #+BEGIN_SRC emacs-lisp
      (global-set-key "\M-3" '(lambda() (interactive) (insert "#")))
      (global-set-key (kbd "C-c n") #'djr-new-buffer-frame)
      (global-set-key "\C-x\l" '(lambda () (interactive)
                                  (switch-to-buffer "*slime-repl sbcl*")))
      (global-set-key (kbd "C-x C-b") 'ibuffer) ;; Use Ibuffer for Buffer List
      ;; Becasue I just can't quite those MacOS bindings, and why should I?
      (global-set-key (kbd "s-<right>") 'move-end-of-line)
      (global-set-key (kbd "s-<left>") 'move-beginning-of-line)
      (global-set-key (kbd "s-<up>") 'beginning-of-buffer)
      (global-set-key (kbd "s-<down>") 'end-of-buffer)
      (global-set-key (kbd "M-<up>") 'scroll-down-command)
      (global-set-key (kbd "M-<down>") 'scroll-up-command)
      (global-set-key (kbd "s-w") 'delete-frame)
      (global-set-key (kbd "s-<backspace>") 'kill-whole-line)
      ;; Resize Windows
      ;; (global-set-key (kbd "S-s-C-<down>") 'shrink-window-horizontally)
      ;; (global-set-key (kbd "S-s-C-<up>") 'enlarge-window-horizontally)
      (global-set-key (kbd "C-x C-g") 'project-find-regexp)
    #+END_SRC
** Org
*** org-mode dates
    #+BEGIN_SRC emacs-lisp
      (setq-default org-display-custom-times t)
      (setq org-time-stamp-custom-formats '("<%e %B %Y>" . "<%a, %e %b %Y %H:%M>"))
      ;; (use-package ox
      ;;   :ensure t)
      (require 'ox)
      (defun endless/filter-timestamp (trans back _comm)
        "Remove <> around time-stamps."
        (pcase back
          ((or `jekyll `html)
           (replace-regexp-in-string "&[lg]t;" "" trans))
          (`latex
           (replace-regexp-in-string "[<>]" "" trans))))
      (add-to-list 'org-export-filter-timestamp-functions
                   #'endless/filter-timestamp)
    #+END_SRC
*** Org tempo
    #+BEGIN_SRC emacs-lisp
      (require 'org-tempo)
      (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    #+END_SRC
*** org-reveal
    #+BEGIN_SRC emacs-lisp
      ;; Reveal.js + Org mode
      (use-package ox-reveal
        :ensure t
        :config (setq Org-Reveal-root (concat "file://" (expand-file-name "~/reveal.js/"))
                      Org-Reveal-title-slide nil))
    #+END_SRC
*** org bullets
    #+BEGIN_SRC emacs-lisp
      (use-package org-bullets
        :if window-system
        :ensure t
        :after org
        :hook (org-mode . org-bullets-mode)
        :custom
        (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

      ;; Replace list hyphen with dot
      (font-lock-add-keywords 'org-mode
                              '(("^ *\\([-]\\) "
                                 (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
      (when (member "Cantarell" (font-family-list))
        (dolist (face '((org-level-1 . 1.2)
                        (org-level-2 . 1.1)
                        (org-level-3 . 1.05)
                        (org-level-4 . 1.0)
                        (org-level-5 . 1.1)
                        (org-level-6 . 1.1)
                        (org-level-7 . 1.1)
                        (org-level-8 . 1.1)))
          (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face))))
    #+END_SRC
*** org capture
    #+begin_src emacs-lisp
      (custom-set-variables
       '(org-directory (expand-file-name "~/org"))
       '(org-agenda-files (list org-directory)))
      (setq org-default-notes-file (concat org-directory "/notes.org"))
    #+end_src
*** custom TODOs
    #+begin_src emacs-lisp
      (setq org-todo-keyword-faces
            '(("IN_PROGRESS" . "orange")
              ("BLOCKED" . "blue")
              ("CR" . "orange")
              ("QA" . "green")
              ("POSTPONED" . "blue")
              ("CANCELLED" . "grey")))
      (setq org-todo-keywords
            '((sequence "TODO(t)" "|" "IN_PROGRESS(i)" "POSTPONED(p)"
                        "|" "DONE(d)" "CR(r)" "QA(q)" "CANCELLED(c)" "BLOCKED(b)")))
    #+end_src
*** org-jira
    This relies on their being auth credentials in the file [[~/.authinfo]]
    Details here: [[https://github.com/ahungry/org-jira]]
    #+begin_src emacs-lisp
      (use-package org-jira
        :ensure t
        :if window-system
        :config (unless (file-exists-p "~/.org-jira")
                  (make-directory "~/.org-jira"))
        (setq jiralib-url "https://phantomstudios.atlassian.net/")
        (setq org-jira-done-states '("Merged" "Done" "Closed"))
        (setq org-jira-jira-status-to-org-keyword-alist
              '(("In Progress" . "IN_PROGRESS")
                ("To Do" . "TODO")
                ("Reopened" . "TODO")
                ("Blocked" . "BLOCKED")
                ("In Review" . "CR")
                ("Merged" . "+2")
                ("Ready for QA" . "QA")
                ("In QA" . "QA")
                ("Done" . "DONE")
                ("Ready for Deployment" . "DONE")
                ("Closed" . "DONE")))
        (setq org-jira-progress-issue-flow
              '(("To Do" . "In Progress")
                ("Reopened/Blocked" . "In Progress")
                ("In CR" . "Merged")
                ("Ready for QA" . "Done")
                ("Ready for Deployment" . "Closed"))))
    #+end_src

** too-long-mode
   #+begin_src emacs-lisp
     (global-so-long-mode 1)
   #+end_src
** Eshell syntax highlighting
   Taken from [[https://github.com/akreisher/eshell-syntax-highlighting/][here]].
   #+begin_src emacs-lisp
     (use-package eshell-syntax-highlighting
       :if window-system
       :after esh-mode
       :ensure t ;; Install if not already installed.
       :config
       ;; Enable in all Eshell buffers.
       (eshell-syntax-highlighting-global-mode +1))
   #+end_src
** Font & Encoding & Ligatures & Guides
*** UTF-8
    #+BEGIN_SRC emacs-lisp
      ;;; utf-8
      (setq locale-coding-system 'utf-8)
      (set-terminal-coding-system 'utf-8)
      (set-keyboard-coding-system 'utf-8)
      (set-selection-coding-system 'utf-8)
      (prefer-coding-system 'utf-8)
    #+END_SRC
*** Unicode
    #+begin_src emacs-lisp
      (use-package unicode-fonts
        :ensure t
        :config
        (unicode-fonts-setup))
    #+end_src
*** fira-code-mode
    Taken from [[https://github.com/Profpatsch/blog/blob/master/posts/ligature-emulation-in-emacs/post.md#appendix-b-update-1-firacode-integration][here]]
    #+begin_src emacs-lisp
      (use-package fira-code-mode
        :ensure t
        :if window-system
        :custom (fira-code-mode-disabled-ligatures '("[]" "x"))  ; ligatures you don't want
        :hook prog-mode)
    #+end_src
*** Ligatures
    #+begin_src emacs-lisp
      (let ((lig-path (expand-file-name "~/.emacs.d/ligature/")))
        (unless (file-exists-p lig-path)
          (shell-command "git clone -q https://github.com/mickeynp/ligature.el.git ligature"))
        (use-package ligature
          :if window-system
          :load-path "~/.emacs.d/ligature/"
          :config
          ;; Enable the "www" ligature in every possible major mode
          (ligature-set-ligatures 't '("www"))
          ;; Enable traditional ligature support in eww-mode, if the
          ;; `variable-pitch' face supports it
          (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
          ;; Enable all Cascadia Code ligatures in programming modes
          (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                                               ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                                               "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                                               "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                                               "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                                               "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                                               "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                                               "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                                               ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                                               "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                                               "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                                               "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
                                               "\\\\" "://"))
          ;; Enables ligature checks globally in all buffers. You can also do it
          ;; per mode with `ligature-mode'.
          (global-ligature-mode t)))
    #+end_src
*** Fonts
    <<fonts>>
    #+BEGIN_SRC emacs-lisp
      (when (display-graphic-p)
        (add-to-list 'default-frame-alist '(font . "Fira Code"))
        (set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code Symbol")
        (set-face-attribute 'default nil :height 130)
        (set-frame-font "Fira Code 13" nil t))
    #+end_src
*** highlight-indent-guides
    Take from [[https://github.com/DarthFennec/highlight-indent-guides][here]]
    #+begin_src emacs-lisp
      (use-package highlight-indent-guides
        :if window-system
        :ensure t
        :config (setq highlight-indent-guides-character-face "Fira Code Symbol"
                      highlight-indent-guides-method 'bitmap
                      highlight-indent-guides-auto-character-face-perc 10)
        :hook (prog-mode . highlight-indent-guides-mode))
    #+end_src
** Stackoverflow Search
   #+begin_src emacs-lisp
     (use-package sos
       :if window-system
       :ensure t)
   #+end_src

** Xah customisations
*** Move beginning/end of line
    #+begin_src emacs-lisp
      (defun xah-beginning-of-line-or-block ()
        "Move cursor to beginning of line or previous paragraph.

      • When called first time, move cursor to beginning of char in current line. (if already, move to beginning of line.)
      • When called again, move cursor backward by jumping over any sequence of whitespaces containing 2 blank lines.

      URL `http://ergoemacs.org/emacs/emacs_keybinding_design_beginning-of-line-or-block.html'
      Version 2017-05-13"
        (interactive)
        (let (($p (point)))
          (if (or (equal (point) (line-beginning-position))
                  (equal last-command this-command ))
              (if (re-search-backward "\n[\t\n ]*\n+" nil "NOERROR")
                  (progn
                    (skip-chars-backward "\n\t ")
                    (forward-char ))
                (goto-char (point-min)))
            (progn
              (back-to-indentation)
              (when (eq $p (point))
                (beginning-of-line))))))

      (defun xah-end-of-line-or-block ()
        "Move cursor to end of line or next paragraph.

      • When called first time, move cursor to end of line.
      • When called again, move cursor forward by jumping over any sequence of whitespaces containing 2 blank lines.

      URL `http://ergoemacs.org/emacs/emacs_keybinding_design_beginning-of-line-or-block.html'
      Version 2017-05-30"
        (interactive)
        (if (or (equal (point) (line-end-position))
                (equal last-command this-command ))
            (progn
              (re-search-forward "\n[\t\n ]*\n+" nil "NOERROR" ))
          (end-of-line)))

      (global-set-key (kbd "C-a") 'xah-beginning-of-line-or-block)
      (global-set-key (kbd "C-e") 'xah-end-of-line-or-block)
    #+end_src
** lorem
   #+begin_src emacs-lisp
     (use-package lorem-ipsum
       :ensure t)
   #+end_src
** reformatter
   #+begin_src emacs-lisp
     (use-package reformatter
       :ensure t)
   #+end_src
** whitespace
   #+begin_src emacs-lisp
     (progn
       ;; Make whitespace-mode with very basic background coloring for whitespaces.
       ;; http://ergoemacs.org/emacs/whitespace-mode.html
       (setq whitespace-style (quote (face spaces tabs newline space-mark tab-mark )))

       ;; Make whitespace-mode and whitespace-newline-mode use “¶” for end of line char and “▷” for tab.
       (setq whitespace-display-mappings
             ;; all numbers are unicode codepoint in decimal. e.g. (insert-char 182 1)
             '(
               (space-mark 32 [183] [46]) ; SPACE 32 「 」, 183 MIDDLE DOT 「·」, 46 FULL STOP 「.」
               (newline-mark 10 [182 10]) ; LINE FEED,
               (tab-mark 9 [9655 9] [92 9]) ; tab
               )))
     (global-whitespace-mode)
     ;; (use-package whitespace-cleanup-mode
     ;;   :ensure t
     ;;   :config (setq 'whitespace-cleanup-mode t)
     ;;   :hook (prog-mode . whitespace-cleanup))
   #+end_src
** kintaro-mode
   #+begin_src emacs-lisp
     (when (file-exists-p (expand-file-name "~/.emacs.d/kintaro-mode"))
       (setq load-path (cons (expand-file-name "~/.emacs.d/kintaro-mode") load-path))
       (require 'kintaro-mode)
       (add-to-list 'auto-mode-alist '("\\.ksdl\\'" . kintaro-mode)))
   #+end_src
** backups
   #+begin_src emacs-lisp
     (setq backup-directory-alist
           `(("." . ,(concat user-emacs-directory "backups"))))
   #+end_src
** open in another App
   #+begin_src emacs-lisp
     (defun xah-open-in-external-app (&optional @fname)
       "Open the current file or dired marked files in external app.
        When called in emacs lisp, if @fname is given, open that.
        URL `http://ergoemacs.org/emacs/emacs_dired_open_file_in_ext_apps.html'
        Version 2019-11-04 2021-02-16"
       (interactive)
       (let* (
              ($file-list
               (if @fname
                   (progn (list @fname))
                 (if (string-equal major-mode "dired-mode")
                     (dired-get-marked-files)
                   (list (buffer-file-name)))))
              ($do-it-p (if (<= (length $file-list) 5)
                            t
                          (y-or-n-p "Open more than 5 files? "))))
         (when $do-it-p
           (cond
            ((string-equal system-type "windows-nt")
             (mapc
              (lambda ($fpath)
                (shell-command
                 (concat "PowerShell -Command \"Invoke-Item -LiteralPath\" "
                         "'"
                         (shell-quote-argument (expand-file-name $fpath )) "'")))
              $file-list))
            ((string-equal system-type "darwin")
             (mapc
              (lambda ($fpath)
                (shell-command
                 (concat "open " (shell-quote-argument $fpath))))
              $file-list))
            ((string-equal system-type "gnu/linux")
             (mapc
              (lambda ($fpath) (let ((process-connection-type nil))
                                 (start-process "" nil "xdg-open" $fpath)))
              $file-list))))))
     (global-set-key (kbd "C-s-o") 'xah-open-in-external-app)
   #+end_src

** Regexp
   #+begin_src emacs-lisp
     (defvar my/re-builder-positions nil
       "Store point and region bounds before calling re-builder")
     (advice-add 're-builder
                 :before
                 (defun my/re-builder-save-state (&rest _)
                   "Save into `my/re-builder-positions' the point and region
          positions before calling `re-builder'."
                   (setq my/re-builder-positions
                         (cons (point)
                               (when (region-active-p)
                                 (list (region-beginning)
                                       (region-end)))))))

     (defun reb-replace-regexp (&optional delimited)
       "Run `query-replace-regexp' with the contents of re-builder. With
          non-nil optional argument DELIMITED, only replace matches
          surrounded by word boundaries."
       (interactive "P")
       (reb-update-regexp)
       (let* ((re (reb-target-binding reb-regexp))
              (replacement (query-replace-read-to
                            re
                            (concat "Query replace"
                                    (if current-prefix-arg
                                        (if (eq current-prefix-arg '-) " backward" " word")
                                      "")
                                    " regexp"
                                    (if (with-selected-window reb-target-window
                                          (region-active-p)) " in region" ""))
                            t))
              (pnt (car my/re-builder-positions))
              (beg (cadr my/re-builder-positions))
              (end (caddr my/re-builder-positions)))
         (with-selected-window reb-target-window
           (goto-char pnt) ; replace with (goto-char (match-beginning 0)) if you want
                                             ; to control where in the buffer the replacement starts
                                             ; with re-builder
           (setq my/re-builder-positions nil)
           (reb-quit)
           (query-replace-regexp re replacement delimited beg end))))
     (require 're-builder)
     (define-key reb-mode-map (kbd "RET") #'reb-replace-regexp)
     (define-key reb-lisp-mode-map (kbd "RET") #'reb-replace-regexp)
     (global-set-key (kbd "C-M-%") #'re-builder)
   #+end_src
** Multiple Cursors
   #+begin_src emacs-lisp
     (use-package multiple-cursors
       :defer t
       :ensure t)
   #+end_src
** Magit
   #+begin_src emacs-lisp
     (use-package magit
       :ensure t
       :defer t)
   #+end_src
** shader-mode
   #+begin_src emacs-lisp
     (use-package shader-mode
       :ensure t
       :defer t)
   #+end_src
