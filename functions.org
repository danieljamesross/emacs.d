* functions
:PROPERTIES:
:header-args: :results silent :tangle yes
:END:
** internet-up-p
Taken from this [[https://emacs.stackexchange.com/questions/7653/elisp-code-to-check-for-internet-connection][great thread]].
#+begin_src emacs-lisp
  (defun internet-up-p (&optional host)
    "Ping bbc.co.uk to test if internet is connected"
    (zerop (call-process "ping" nil nil nil "-c" "1" "-W" "1"
                         (if host host "www.bbc.co.uk"))))
#+end_src
** kill-async-shell-when-done
#+begin_src emacs-lisp
  (defun kill-async-shell-when-done (proc buffer-name)
    (when (process-live-p proc)
      (message (format "Process live %s %s" proc buffer-name))
      (set-process-sentinel proc
			    (lambda (process signal)
			      (progn (message (format "process status: %s"
						      (process-status process)))
				     (when (memq (process-status process) '(exit signal))
				       (message (format "Killed buffer %s" (buffer-name (process-buffer process))))
				       (shell-command-sentinel process signal)
				       (kill-buffer (buffer-name (process-buffer process)))))))))
#+end_src
** check-file-exists-or-clone
#+begin_src emacs-lisp
  ;; Stop the async shell buffer from popping up
  (add-to-list 'display-buffer-alist '("*Async Shell Command*" display-buffer-no-window (nil)))

  (defun check-file-exists-or-clone (file repo)
    "Check a file/folder exists and download from git if not"
    (let* ((expanded-filname (expand-file-name file))
           (buffer-name (generate-new-buffer-name "*Async Shell Command*"))
           (async-shell-buffer
            (generate-new-buffer buffer-name))
           proc)
      (if (internet-up-p)
          (if (file-exists-p expanded-filname)
              (progn (princ (format "%s already exists, updating...\n"
                                    expanded-filname))
                     (setf proc
                           (progn (async-shell-command
                                   (format "cd %s && git pull" expanded-filname)
                                   async-shell-buffer)
                                  (get-buffer-process async-shell-buffer)))
                     (kill-async-shell-when-done proc buffer-name)
                     (message (format "Updated %s\n" expanded-filname)))
            (progn
              (setf proc
                    (progn (async-shell-command
                            (format "git clone -q %s %s" repo expanded-filname)
                            async-shell-buffer)
                           (get-buffer-process async-shell-buffer)))
              (message (format "Cloning repo %s into %s" repo expanded-filname))
              (kill-async-shell-when-done proc buffer-name)))
        (message (format "No internet connection, can't clone %s" repo)))))
#+end_src
** check-font-exists-or-download
#+begin_src emacs-lisp
  (defun set-default-font (font-name &optional font-size)
    "Add the font to `default-frame-alist' and then `set-frame-font'"
    (add-to-list 'default-frame-alist `(font . ,font-name))
    (set-frame-font (format "%s %s" font-name font-size) nil t)
    (message (format "Set font %s" font-name)))

  (defun check-font-exists-or-download (font-name font-repo &optional font-size)
    "Check font exists, download if not, then call `set-default-font'"
    (if (member font-name (font-family-list))
        (set-default-font font-name font-size)
      (if (internet-up-p)
          (let* ((temp-folder (expand-file-name "/private/tmp/hack"))
                 (font-folder (expand-file-name "/Library/Fonts/"))
                 (buffer-name (format "font-shell-%d" (unique-random-number)))
                 (shell-command-string
                  (concat (format "git clone -q %s %s" font-repo temp-folder)
                          " && "
                          (format "mv %s/font/* %s" temp-folder font-folder)))
                 (async-shell-buffer (generate-new-buffer buffer-name))
                 (proc (progn (async-shell-command shell-command-string async-shell-buffer)
                              (get-buffer-process async-shell-buffer))))
            (kill-async-shell-when-done proc buffer-name))
        (message (format "No internet connection, can't clone %s" font-repo)))))
#+end_src
** enable-minor-mode
#+begin_src emacs-lisp
  (defun enable-minor-mode (my-pair)
    "Enable minor mode if filename match the regexp. MY-PAIR is a cons cell (regexp . minor-mode)."
    (when (and (buffer-file-name)
               (string-match (car my-pair) (buffer-file-name)))
      (funcall (cdr my-pair))))
#+end_src
** eval-after-web-mode-load
#+begin_src emacs-lisp
  (defmacro eval-after-web-mode-load (hook)
    "Add a hook that is called after web-mode is initialised"
    `(eval-after-load 'web-mode '(add-hook 'web-mode-hook ,hook)))
#+end_src
** eval-after-js-mode-load
#+begin_src emacs-lisp
  (defmacro eval-after-js-mode-load (hook)
    "Add a hook that is called after js-mode is initialised"
    `(eval-after-load 'js-mode '(add-hook 'js-mode-hook ,hook)))
#+end_src
